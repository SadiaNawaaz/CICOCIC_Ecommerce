@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage ProtectedLocalStore
@using Ecommerce.Shared.Services.ProductVariants;
@inject IProductVariantService ProductVariantService
@inject NavigationManager Navigation

@using Microsoft.Extensions.Localization
@using Web.Resources;
@using System.Globalization
@inject IStringLocalizer<Web.Resources.Resources> localizer


<style>
    .search-input {
        width: 80%;
    }

    .has-search .form-control-feedback {
        position: absolute;
        z-index: 2;
        display: block;
        width: 2.375rem;
        height: 2.375rem;
        line-height: 2.375rem;
        text-align: center;
        pointer-events: none;
        color: #aaa;
    }

    .dropdown-menu {
        display: none;
    }

        .dropdown-menu.show {
            display: block;
        }
</style>

<div id="top-nav" class="top-nav">
    <div class="container-fluid mt-2 mb-2">
        <div class="collapse navbar-collapse">
            <div class="header-logo" style="margin-right:10px">
                <a href="/">
                    <span class="brand-logo">
                        <img src="/assets/img/Logo/thumb_Wit op transparantSmall.png" style="max-height:30px" />
                    </span>
                </a>
            </div>

            <div class="search-container flex-grow-1 d-flex align-items-center">
                <div class="mx-10px">
                    <span class="text-ligt" style="font-size: 0.8rem; color: rgba(255, 255, 255, 0.7);">
                        &nbsp;&nbsp;@localizer["DeliverTo"]
                    </span>
                    <span class="text-white">
                        <b style="display: flex; align-items: center;">
                            <i class="bi bi-geo-alt" style="margin-right: 5px;"></i> Ireland
                        </b>
                    </span>
                </div>

                <div class="input-group mx-10px">
                    <input type="text" class="form-control" placeholder="Search items" @bind="searchTerm" @oninput="OnSearchTermChanged" id="searchInput">
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="button">
                            <i class="fa fa-search"></i>
                        </button>
                    </div>

                    @if (searchResults?.Any() == true)
                        {
                        <ul class="dropdown-menu show" style="position: absolute; background-color:white; width:100%" id="dropdownMenu">
                            @foreach (var item in searchResults)
                                {
                                <li class="dropdown-item" @onclick="() => SelectItem(item)">
                                    @item
                                </li>
                                }
                        </ul>
                        }
                </div>
            </div>

            <ul class="nav navbar-nav navbar-end">

                <CultureSelector/>
                @*<li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                <img src="../assets/img/flag/flag-english.png" class="flag-img" alt="" /> Language
            </a>
            <ul class="dropdown-menu">
                <li>
                    <a class="dropdown-item" href="#" @onclick='(() => ChangeLanguage("en"))'>
                        <img src="../assets/img/flag/flag-english.png" class="flag-img" alt="" /> English
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="#" @onclick='() => ChangeLanguage("nl")'>
                        <img src="../assets/img/flag/OIP.jpg" class="flag-img" alt="" /> Dutch
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="#" @onclick='() => ChangeLanguage("de")'>
                        <img src="../assets/img/flag/flag-german.png" class="flag-img" alt="" /> German
                    </a>
                </li>
            </ul>
        </li>*@

                <li class="dropdown dropdown-hover">
                    @if (!String.IsNullOrEmpty(userName))
                        {
                        <a href="#" data-bs-toggle="dropdown">
                            @userName
                            <b class="caret"></b>
                            <span class="arrow top"></span>
                        </a>
                        <div class="dropdown-menu" style="background-color:white">
                            <a class="dropdown-item" href="javascript:void(0)" @onclick="HandleLogout">Logout</a>
                            <a class="dropdown-item" href="/myAccount">Account</a>
                        </div>
                        }
                    else
                        {
                        <a href="/Signup">
                            <span><b>Login / Register</b></span>
                        </a>
                        }
                </li>

                <li><a href="#"><i class="fab fa-facebook-f f-s-14"></i></a></li>
                <li><a href="#"><i class="fab fa-instagram f-s-14"></i></a></li>
                <li><a href="#"><i class="fab fa-google f-s-14"></i></a></li>
            </ul>
        </div>
    </div>
</div>



@code {
    private string userName = string.Empty;
    private string searchTerm = string.Empty;
    private List<string> searchResults = new List<string>();
    private bool hasInitialized = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
        {

        if (firstRender && !hasInitialized)
            {
            try
                {
                var result = await ProtectedLocalStore.GetAsync<string>("UserName");

                if (result.Success && !string.IsNullOrEmpty(result.Value))
                    {
                    userName = result.Value;
                    }
                else
                    {
                    userName = string.Empty;
                    }

                hasInitialized = true;
                StateHasChanged();
                }
            catch (Exception ex)
                {
                Console.WriteLine($"Error retrieving userName from ProtectedLocalStorage: {ex.Message}");
                userName = string.Empty; // Fallback to default state if retrieval fails
                }
            }
        }

    private async Task OnSearchTermChanged(ChangeEventArgs e)
        {
        searchTerm = e.Value.ToString();

        if (searchTerm.Length >= 3)
            {
            searchResults = await SearchFromDatabase(searchTerm);
            }
        else
            {
            searchResults.Clear();
            }

        StateHasChanged();
        }

    private async Task<List<string>> SearchFromDatabase(string searchTerm)
        {
        var response = await ProductVariantService.SearchProductVariantsByKeywordAsync(searchTerm);

        if (response.Success && response.Data != null)
            {
            return response.Data.Select(pv => pv.Name).Distinct().ToList();
            }

        return new List<string>();
        }

    private void SelectItem(string item)
        {
        searchTerm = item;
        searchResults.Clear();
        Navigation.NavigateTo($"/ProductByCategory?Id=0&keyword={searchTerm}");

        StateHasChanged();
        }

    private async Task HandleLogout()
        {
        await ProtectedLocalStore.DeleteAsync("UserName");
        await ProtectedLocalStore.DeleteAsync("CustomerId");
        Navigation.NavigateTo("/login", forceLoad: true);
        }


    private async Task ChangeLanguage(string culture)
        {

        Navigation.NavigateTo($"?culture={culture}&ui-culture={culture}", forceLoad: true);
        }
}
@*<script>

        document.addEventListener('click', function(event) {
            const searchInput = document.getElementById('searchInput');
            const dropdownMenu = document.getElementById('dropdownMenu');

            if (dropdownMenu && searchInput) {
                if (!searchInput.contains(event.target) && !dropdownMenu.contains(event.target)) {
                    dropdownMenu.classList.remove('show');
                }
            }
        });

        // Show dropdown when search input is focused or typed in
        document.getElementById('searchInput').addEventListener('focus', function() {
            const dropdownMenu = document.getElementById('dropdownMenu');
            if (dropdownMenu && dropdownMenu.children.length > 0) {
                dropdownMenu.classList.add('show');
            }
        });
    </script>*@