
@page "/ProductByCategory"
@inject IProductVariantService productVariantService
@inject ICategoryService CategoryService
@using Ecommerce.Shared.Entities;
@rendermode InteractiveServer



    <div id="search-results" class="section-container">
        <!-- BEGIN container -->
        <div class="container">
            <!-- BEGIN search-container -->
            <div class="search-container">
                <!-- BEGIN search-sidebar -->
                <div class="search-sidebar">
                    <h4 class="title">
                        Filter By

                    </h4>
                    <div>
                        <div class="mb-3">
                            <label class="form-label">Keywords</label>


                            <input type="text" class="form-control input-sm" name="keyword" value="@Keyword" placeholder="Enter Keywords" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Price</label>
                            <div class="row row-space-0">
                                <div class="col-md-5">
                                    <input type="number" @bind="@PriceForm" class="form-control input-sm" name="price_from" placeholder="Price From" />
                                </div>
                                <div class="col-md-2 text-center pt-5px fs-12px text-muted">to</div>
                                <div class="col-md-5">
                                    <input type="number" @bind="@PriceTo" class="form-control input-sm" name="price_to" placeholder="Price To" />
                                </div>
                            </div>
                        </div>
                        <div class="mb-30px">
                            <button type="button" @onclick='() => ChangeSort("Range")' class="btn btn-sm btn-theme btn-dark w-100"><i class="fa fa-search fa-fw me-1 ms-n3"></i> FILTER</button>
                        </div>
                    </div>
                    <h4 class="title mb-0">Categories</h4>
                    <ul class="search-category-list">
                        @if (CategoryVariantCount != null && CategoryVariantCount.Count() > 0)
                            {
                            foreach (var cat in CategoryVariantCount)
                                {
                                <li><a href="/ProductByCategory?Id=@cat.CategoryId">@cat.CategoryName <span class="pull-right">(@cat.VariantCount)</span></a></li>
                                }
                            }


                    </ul>
                </div>
                <!-- END search-sidebar -->
                <!-- BEGIN search-content -->


                <div class="search-content">
                    <!-- BEGIN search-toolbar -->
                    <div class="search-toolbar">
                        <!-- BEGIN row -->
                        <div class="row">
                            <div class="col-lg-6">

                                <h4>We found @ProductVariants.Count() Items For @(string.IsNullOrEmpty(_Category.Name) ? Keyword : _Category.Name) </h4>

                            </div>
                            <!-- END col-6 -->
                            <!-- BEGIN col-6 -->
                            <div class="col-lg-6 text-end">
                                <ul class="sort-list">
                                    <li class="text"><i class="fa fa-filter"></i> Sort by:</li>
                                    <li class="@((selectedSort == "Popular") ? "active" : "")">
                                        <a href="#" @onclick='() => ChangeSort("Popular")'>Popular</a>
                                    </li>
                                    <li class="@((selectedSort == "New Arrival") ? "active" : "")">
                                        <a href="#" @onclick='() => ChangeSort("New Arrival")'>New Arrival</a>
                                    </li>
                                    <li class="@((selectedSort == "Discount") ? "active" : "")">
                                        <a href="#" @onclick='() => ChangeSort("Discount")'>Discount</a>
                                    </li>
                                    <li class="@((selectedSort == "Price") ? "active" : "")">
                                        <a href="#" @onclick='() => ChangeSort("Price")'>Price</a>
                                    </li>
                                </ul>

                            </div>
                            <!-- END col-6 -->
                        </div>
                        <!-- END row -->
                    </div>
                    <!-- END search-toolbar -->
                    <!-- BEGIN search-item-container -->
                    <div class="search-container">
                        <div class="container justify-content-center mt-50 mb-50">

                            <div class="row">
                                @if (FilteredProductVariants != null && FilteredProductVariants.Any())
                                    {

                                    int discountPercentage;
                                    }
                                @foreach (var variant in FilteredProductVariants)
                                    {
                                    int discountPercentage;
                                    <div class="col-md-3 mt-2">


                                        <div class="card">
                                            <div class="card-body bg-light">
                                                <div class="card-img-actions justify-content-center align-items-center"
                                                     style="height:200px; background-color: #f5f5f5; padding: 10px; border-radius: 5px;">
                                                    <img src="@(!string.IsNullOrEmpty(variant.Thumbnail) ? variant.Thumbnail : UrlHelper.GetVariantImageUrl(variant.Id, variant.DefaultImageUrl))"
                                                         class="img-fluid"
                                                         style="object-fit: contain; max-width: 100%; max-height: 100%;"
                                                         alt="Product Image">


                                                </div>
                                                @if (variant.Brand != null)
                                                    {
                                                    <span class="brand"
                                                          style="font-size: 12px; font-weight: bold; color: #555;text-align:center">
                                                        @variant.Brand
                                                    </span>
                                                    }
                                                <br />
                                                <!-- Year -->
                                                @if (variant.Year != null)
                                                    {
                                                    <span class="year"
                                                          style="font-size: 12px; color: #999; text-align: center">
                                                        @variant.Year
                                                    </span>
                                                    }
                                            </div>


                                            <div class="card-body text-center">

                                                <div class="mb-2">
                                                    <NavLink class="text-muted" data-abc="true" href="@GetProductUrl(variant.Id)" title="@variant.Name" style="display: inline-block; max-width: 150px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                                        @variant.Name<br />


                                                </NavLink>
                                            </div>

                                            @{
                                             
                                                double discount = variant.ProductPrice - variant.VariantPrice;
                                                if (discount > 0)
                                                    {
                                                    discountPercentage = (int)Math.Round((discount / variant.ProductPrice) * 100);

                                                    <div class="discount-badge"
                                                         style="position: absolute; right: -10px; top: 50%; transform: translateY(-50%); background-color: black; color: white; padding: 5px 10px; border-radius: 5px; font-size: 12px; font-weight: 600 ">
                                                        @discountPercentage% OFF
                                                    </div>


                                                    }
                                            }
                                            <h3 class="mb-0 font-weight-semibold">€ @variant.VariantPrice</h3>
                                            <div class="item-discount-price">

                                                <span class="item-discount-price" style="text-decoration: line-through; color: gray;">
                                                    @variant.ProductPrice.ToString("C")
                                                </span>
                                            </div>


                                            <a href="@GetProductUrl(variant.Id)" class="btn bg-cart"><i class="fa fa-cart-plus mr-2"></i> Add to cart</a>


                                            </div>
                                        </div>




                                    </div>
                                    }







                            </div>
                        </div>
                    </div>



                </div>
                <!-- END search-content -->
            </div>
            <!-- END search-container -->
        </div>
        <!-- END container -->
    </div>


    @code
{
        [Parameter]
        [SupplyParameterFromQuery(Name = "Id")]
        public long Id { get; set; }

        [Parameter]
        [SupplyParameterFromQuery(Name = "keyword")]
        public string Keyword { get; set; }


        private IEnumerable<ProductVariantDto> ProductVariants = new List<ProductVariantDto>();
        private IEnumerable<CategoryVariantCountDto> CategoryVariantCount = new List<CategoryVariantCountDto>();
        private IEnumerable<ProductVariantDto> FilteredProductVariants = new List<ProductVariantDto>();
        private Category _Category = new Category();
        private string selectedSort = "Popular"; // Default sorting
        private int PriceForm;
        private int PriceTo;

        protected override async Task OnParametersSetAsync()
            {
            if (Id > 0)
                {
                await LoadCategoryTreeAsync();
                await LoadProductVariants();
                }
            if (!string.IsNullOrEmpty(Keyword))
                {
                FilterByKeyword();
                }
            }

        protected override async Task OnInitializedAsync()
            {
            await LoadCategoryVariantCount();
            }
        private async Task LoadProductVariants()
            {
            try
                {


                var response = await productVariantService.GetProductVariantsByCategoryAsync(Id);
                if (response.Success)
                    {
                    ProductVariants = response.Data;
                    FilteredProductVariants = ProductVariants;
                    }
                else
                    {

                    }
                }
            catch (Exception ex)
                {

                }
            }


        private async Task LoadCategoryVariantCount()
            {
            try
                {




                var response = await productVariantService.GetCategoriesWithVariantCountsAsync();
                if (response.Success)
                    {
                    CategoryVariantCount = response.Data;
                    }
                else
                    {

                    }
                }
            catch (Exception ex)
                {

                }
            }

        private async Task LoadCategoryTreeAsync()
            {
            try
                {
                var response = await CategoryService.GetCategoryByIdAsync(Id);
                if (response.Success)
                    {
                    _Category = response.Data;
                    StateHasChanged();
                    }

                }
            catch (Exception ex)
                {
                _Category = new Category();
                }
            }
        private string GetProductUrl(long productId)
            {
            return $"/Product?Id={productId}";
            }
        #region Filters
        private void SortAndFilterProductVariants()
            {
            try
                {
                switch (selectedSort)
                    {
                    case "Popular":
                        FilteredProductVariants = ProductVariants.OrderByDescending(v => v.Id); // Adjust based on actual data
                        break;
                    case "New Arrival":
                        FilteredProductVariants = ProductVariants.OrderByDescending(v => v.ProductId); // Assuming higher ID is newer
                        break;
                    case "Discount":
                        FilteredProductVariants = ProductVariants.OrderByDescending(v => (v.ProductPrice - v.VariantPrice) / v.ProductPrice);
                        break;
                    case "Price":
                        FilteredProductVariants = ProductVariants.OrderBy(v => v.VariantPrice);
                        break;
                    case "Range":
                        FilteredProductVariants = ProductVariants.Where(v => v.VariantPrice >= PriceForm && v.VariantPrice <= PriceTo);
                        break;
                    }
                StateHasChanged();
                }
            catch (Exception ex)
                {

                }

            }

        private void ChangeSort(string sort)
            {
            selectedSort = sort;
            SortAndFilterProductVariants();
            }

        private void ApplyPriceFilter()
            {
            SortAndFilterProductVariants();
            }
        #endregion


        private  async void FilterByKeyword()
            {
            try
                {


                var response = await productVariantService.SearchProductVariantsByKeywordAsync(Keyword);
                if (response.Success)
                    {
                    ProductVariants = response.Data;
                    FilteredProductVariants = ProductVariants;
                    StateHasChanged();
                    }
                else
                    {

                    }
                }
            catch (Exception ex)
                {

                }

            }
    }