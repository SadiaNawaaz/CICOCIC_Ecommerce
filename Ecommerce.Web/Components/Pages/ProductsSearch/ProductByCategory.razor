
@page "/ProductByCategory/{Id:long?}"
@rendermode InteractiveServer
@inject IProductVariantService productVariantService
@inject ICategoryService CategoryService
@using Ecommerce.Shared.Entities; 
<div id="search-results" class="section-container">
    <!-- BEGIN container -->
    <div class="container">
        <!-- BEGIN search-container -->
        <div class="search-container">
            <!-- BEGIN search-sidebar -->
            <div class="search-sidebar">
                <h4 class="title">Filter By</h4>
                <div >
                    <div class="mb-3">
                        <label class="form-label">Keywords</label>
                        <input type="text" class="form-control input-sm" name="keyword" value="@_Category.Name" placeholder="Enter Keywords" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Price</label>
                        <div class="row row-space-0">
                            <div class="col-md-5">
                                <input type="number" class="form-control input-sm" name="price_from" value="10" placeholder="Price From" />
                            </div>
                            <div class="col-md-2 text-center pt-5px fs-12px text-muted">to</div>
                            <div class="col-md-5">
                                <input type="number" class="form-control input-sm" name="price_to" value="10000" placeholder="Price To" />
                            </div>
                        </div>
                    </div>
                    <div class="mb-30px">
                        <button type="submit" class="btn btn-sm btn-theme btn-dark w-100"><i class="fa fa-search fa-fw me-1 ms-n3"></i> FILTER</button>
                    </div>
                </div>
                <h4 class="title mb-0">Categories</h4>
                <ul class="search-category-list">
                    <li><a href="#">iPhone <span class="pull-right">(10)</span></a></li>
                    <li><a href="#">Mac <span class="pull-right">(15)</span></a></li>
                    <li><a href="#">iPad <span class="pull-right">(32)</span></a></li>
                    <li><a href="#">Watch <span class="pull-right">(4)</span></a></li>
                    <li><a href="#">TV <span class="pull-right">(6)</span></a></li>
                    <li><a href="#">Accessories <span class="pull-right">(38)</span></a></li>
                </ul>
            </div>
            <!-- END search-sidebar -->
            <!-- BEGIN search-content -->
            <div class="search-content">
                <!-- BEGIN search-toolbar -->
                <div class="search-toolbar">
                    <!-- BEGIN row -->
                    <div class="row">
                        <div class="col-lg-6">


                            <h4>We found @ProductVariants.Count() Items For @_Category.Name </h4>
                        </div>
                        <!-- END col-6 -->
                        <!-- BEGIN col-6 -->
                        <div class="col-lg-6 text-end">
                            <ul class="sort-list">
                                <li class="text"><i class="fa fa-filter"></i> Sort by:</li>
                                <li class="active"><a href="#">Popular</a></li>
                                <li><a href="#">New Arrival</a></li>
                                <li><a href="#">Discount</a></li>
                                <li><a href="#">Price</a></li>
                            </ul>
                        </div>
                        <!-- END col-6 -->
                    </div>
                    <!-- END row -->
                </div>
                <!-- END search-toolbar -->
                <!-- BEGIN search-item-container -->


                <div class="search-item-container">
                    <!-- BEGIN item-row -->
                    @if (ProductVariants != null && ProductVariants.Any())
                    {
                        int count = 0;
                        int discountPercentage;
                        <div class="item-row">
                            @foreach (var variant in ProductVariants)
                            {
                                
                                

                                <div class="col-md-4">
                                    <div class="item item-thumbnail">
                                        <a href="#" class="item-image">


                                            <img src="@UrlHelper.GetVariantImageUrl(variant.Id, variant.DefaultImageUrl)" alt="" onerror="this.onerror=null;this.src='/200x200.png';" />

                                            @{
                                                double discount = variant.ProductPrice - variant.VariantPrice;
                                                if (discount > 0)
                                                {
                                                    discountPercentage = (int)Math.Round((discount / variant.ProductPrice) * 100);
                                                    <div class="discount">@discountPercentage.ToString("0.##")% OFF</div>
                                                }
                                            }

                                        </a>
                                        <div class="item-info">
                                            <h4 class="item-title">
                                                <NavLink href="@GetProductUrl(variant.Id)">@variant.Name<br /></NavLink>

                                               
                                            </h4>
                                            <p class="item-desc">3D Touch. 12MP photos. 4K video.</p>
                                            <div class="item-price">@variant.VariantPrice</div>
                                            <div class="item-discount-price">@variant.ProductPrice</div>
                                        </div>
                                    </div>
                                </div>




                            }
                        </div>
                    }


                </div>
                <!-- END search-item-container -->
                <!-- BEGIN pagination -->
                <ul class="pagination justify-content-center mt-0">
                    <li class="page-item disabled"><a href="javascript:;" class="page-link">Previous</a></li>
                    <li class="page-item active"><a class="page-link" href="javascript:;">1</a></li>
                    <li class="page-item"><a class="page-link" href="javascript:;">2</a></li>
                    <li class="page-item"><a class="page-link" href="javascript:;">3</a></li>
                    <li class="page-item"><a class="page-link" href="javascript:;">4</a></li>
                    <li class="page-item"><a class="page-link" href="javascript:;">5</a></li>
                    <li class="page-item"><a class="page-link" href="javascript:;">Next</a></li>
                </ul>
                <!-- END pagination -->
            </div>
            <!-- END search-content -->
        </div>
        <!-- END search-container -->
    </div>
    <!-- END container -->
</div>


@code
{
    [Parameter]
    public long Id { get; set; }


    private IEnumerable<ProductVariantDto> ProductVariants = new List<ProductVariantDto>();
    private Category _Category= new Category();


    protected override async Task OnInitializedAsync()
    {

        await LoadProductVariants();
        if(Id>0)
        {
            await LoadCategoryTreeAsync();
        }

    }

    private async Task LoadProductVariants()
    {
        try
        {
            var response = await productVariantService.GetProductVariantsByCategoryAsync(Id);
            if (response.Success)
            {
                ProductVariants = response.Data;
            }
            else
            {

            }
        }
        catch (Exception ex)
        {

        }
    }

    private async Task LoadCategoryTreeAsync()
    {
        try
        {
            var response = await CategoryService.GetCategoryByIdAsync(Id);
            if (response.Success)
            {
                _Category = response.Data;
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            _Category = new Category();
        }
    }
    private string GetProductUrl(long productId)
    {
        return $"/Product?Id={productId}";
    }
}