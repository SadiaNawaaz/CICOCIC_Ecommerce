@page "/counter/{Name}"
@rendermode InteractiveServer

<button @onclick="SaveTree">fl;sdkfldskf;lsdkf;lsdkf;ldskf;lsdkf;</button>
<div class="row">
    <!-- BEGIN col-6 -->
    <div class="col-xl-6">
        <!-- BEGIN panel -->
        <div class="panel panel-inverse" data-sortable-id="tree-view-3">
            <div class="panel-heading">
                <h4 class="panel-title">Contextual Menu with Drag & Drop</h4>
                <div class="panel-heading-btn">
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
                </div>
            </div>

            <div class="panel-body">
                <div id="jstree-drag-and-drop">

                </div>
            </div>
            <!-- BEGIN hljs-wrapper -->
            <div class="hljs-wrapper">
                <pre><code class="html" data-url="../assets/data/ui-tree/code-3.json"></code></pre>
            </div>

        </div>

    </div>


</div>



@code {




    public class TreeNode
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public string Icon { get; set; }
        public bool Disabled { get; set; }
        public TreeNodeState State { get; set; }
        public string ParentId { get; set; }
        public List<TreeNode> Children { get; set; } = new();
    }

    public class TreeNodeState
    {
        public bool Selected { get; set; }
        public bool Opened { get; set; }
        public bool Disabled { get; set; }
    }




    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            // await JSRuntime.InvokeVoidAsync("handleJstreeDragAndDrop", treeData);
        }
    }

    private async Task SaveTree()
    {

        try
        {
            // var updatedTreeData = await JSRuntime.InvokeAsync<List<TreeNode>>("getUpdatedTree");

            // // Create a TreeNodeMapper instance

            // // Map TreeNode objects to Category objects
            //// var categories = mapper.MapTreeNodesToCategories(updatedTreeData);

            // if (updatedTreeData == null)
            // {
            //     Console.WriteLine("Updated tree data is null");
            //     return;
            // }

        }
        catch (Exception ex)
        {

        }

    }



    //public class TreeNodeMapper
    //{
    //    public List<Category> MapTreeNodesToCategories(List<TreeNode> treeNodes)
    //    {
    //        var categories = new List<Category>();

    //        foreach (var topLevelNode in treeNodes)
    //        {
    //            categories.Add(MapTreeNodeToCategory(topLevelNode, treeNodes));
    //        }

    //        return categories;
    //    }

    //    private Category MapTreeNodeToCategory(TreeNode treeNode, List<TreeNode> allNodes)
    //    {
    //        string[] nodeIdParts = treeNode.Id.Split('_');
    //        int level = int.Parse(nodeIdParts[0].Substring(1)); // Assuming prefix starts with "J"

    //        string parentId = treeNode.ParentId;
    //        if (string.IsNullOrEmpty(parentId))
    //        {
    //            parentId = GetParentIdFromHierarchy(treeNode, allNodes);
    //        }

    //        var category = new Category
    //        {
    //            Name = treeNode.Text,
    //            Level = level,
    //            ParentCategoryId = parentId != null ? long.Parse(parentId) : (long?)null
    //        };

    //        // Recursively map child nodes
    //        if (treeNode.Children != null && treeNode.Children.Any())
    //        {
    //            category.SubCategories = new List<Category>();
    //            foreach (var childNode in treeNode.Children)
    //            {
    //                category.SubCategories.Add(MapTreeNodeToCategory(childNode, allNodes));
    //            }
    //        }

    //        return category;
    //    }

    //    private string GetParentIdFromHierarchy(TreeNode node, List<TreeNode> allNodes)
    //    {
    //        // Recursive function to find parent ID based on hierarchy (optional if ParentId is always available)
    //        foreach (var parentNode in allNodes)
    //        {
    //            if (parentNode.Children != null && parentNode.Children.Any(child => child.Id == node.Id))
    //            {
    //                return parentNode.Id;
    //            }
    //        }

    //        return null; // Handle cases where no parent is found
    //    }
    //}


}


