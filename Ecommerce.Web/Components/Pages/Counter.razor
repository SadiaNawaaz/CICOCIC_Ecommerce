@page "/counter"
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient HttpClient
@inject IProductVariantService productVariantService

<h3>Distance Between Zip Codes</h3>
<div>
    <input @bind="origin" placeholder="Enter origin zip code" />
    <input @bind="destination" placeholder="Enter destination zip code" />
    <button @onclick="CalculateDistance">Get Distance</button>
</div>

@if (!string.IsNullOrEmpty(result))
{
    <p>@result</p>
}

@code {
    private string origin = "91935";
    private string destination = "00765";
    private string result = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadProductVariants();
    }


    private async Task CalculateDistance()
    {
        string apiKey = "";
        // string requestUri = $"https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins={origin}&destinations={destination}&key={apiKey}";
        string requestUri = $"https://maps.googleapis.com/maps/api/distancematrix/json?units=metric&origins={origin},NL&destinations={destination},NL&key={apiKey}";

        HttpResponseMessage response = await HttpClient.GetAsync(requestUri);
        if (response.IsSuccessStatusCode)
        {
            string jsonResult = await response.Content.ReadAsStringAsync();

            result = "";
        }
        else
        {
            result = "Failed to retrieve data";
        }
    }

    private async Task LoadProductVariants()
    {
        try
        {
            //var response = await productVariantService.GetProductVariantsWithinDistanceAsync("2514 HP", 9);
            //if (response.Success)
            //{
            //    var ProductVariants = response.Data;
            //}
            //else
            //{

            //}
        }
        catch (Exception ex)
        {

        }
    }
}
