@page "/Checkout"
@using Ecommerce.Web.Services
@inject ICartService CartService
@using Ecommerce.Web.Components.Toast
@using Ecommerce.Shared.Entities.Orders;
@using Ecommerce.Shared.Services;
@inject IOrderService OrderService
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ProtectedLocalStorage ProtectedLocalStor
@inject IJSRuntime IJSRuntime;
@inject NavigationManager NavigationManager
@inject CartStateService CartStateService
<!-- Message display area -->
<style>
    .notification-alert {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999; /* Make sure it's on top */
        padding: 10px 20px;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        min-width: 250px;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }

        .notification-alert.success {
            background-color: #28a745;
            color: white;
        }

        .notification-alert.error {
            background-color: #dc3545;
            color: white;
        }

        .notification-alert.info {
            background-color: #17a2b8;
            color: white;
        }

        .notification-alert.warning {
            background-color: #ffc107;
            color: black;
        }
</style>




      
<div id="alert" class="alert alert-info notification-alert" style="display: none;"></div>
<div class="section-container" id="checkout-cart">
    <div class="container">
        <div class="checkout">

            <div>

                <div class="checkout-header">
                    <div class="row">

                        <div class="col-lg-4">
                            <div class="step @(currentStep == 1 ? "active" : "")">
                                <a href="#" @onclick="() => SetStep(1)">
                                    <div class="number">1</div>
                                    <div class="info">
                                        <div class="title">Delivery Options</div>
                                        <div class="desc">Lorem ipsum dolor sit amet.</div>
                                    </div>
                                </a>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="step @(currentStep == 2 ? "active" : "")">
                                <a href="#" @onclick="() => SetStep(2)">
                                    <div class="number">2</div>
                                    <div class="info">
                                        <div class="title">Shipping Address</div>
                                        <div class="desc">Vivamus eleifend euismod.</div>
                                    </div>
                                </a>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="step @(currentStep == 3 ? "active" : "")">
                                <a href="#" @onclick="() => SetStep(3)">
                                    <div class="number">3</div>
                                    <div class="info">
                                        <div class="title">Payment</div>
                                        <div class="desc">Aenean ut pretium ipsum.</div>
                                    </div>
                                </a>
                            </div>
                        </div>
                        @*<div class="col-lg-3">
                            <div class="step @(currentStep == 4 ? "active" : "")">
                                <a href="#" @onclick="() => SetStep(4)">
                                    <div class="number">4</div>
                                    <div class="info">
                                        <div class="title">Complete Payment</div>
                                        <div class="desc">Curabitur interdum libero.</div>
                                    </div>
                                </a>
                            </div>
                        </div>*@
                    </div>
                </div>
                <div class="checkout-body">
                    @if (currentStep == 1)
                        {


                        <div class="checkout-body">
                            <div class="table-responsive">

                                @if (CartItems != null && CartItems.Count > 0)
                                    {
                                    <table class="table table-cart">
                                        <thead style="border-bottom: 1px dotted #ccc;;">
                                            <tr>
                                                <th>Product</th>
                                                <th class="text-center">Price</th>
                                                <th class="text-center">Color</th>

                                            </tr>

                                        </thead>
                                        <tbody>

                                            @foreach (var item in CartItems)
                                                {
                                                <tr>
                                                    <td class="cart-product">
                                                        <div class="d-flex">
                                                            <div class="product-img h-100px w-100px d-flex align-items-md-start justify-content-center">
                                                                @*<img src="../assets/img/product/product-iphone-12.png" class="mw-100 mh-100" alt="" />*@
                                                                <img src="@(!string.IsNullOrEmpty(item.Thumbnail) ? item.Thumbnail : UrlHelper.GetImageUrl(item.VariantId,item.ImageName))"
                                                                     class="mw-100 mh-100" alt="" />
                                                            </div>
                                                            <div class="product-info ms-3">
                                                                <h5>@item.VariantName</h5>
                                                                <div class="desc"> </div>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td class="cart-price text-center">€@item.VariantPrice</td>
                                                    <td class="cart-price text-center">Black</td>

                                                    <td class="cart-action text-center">
                                                        <i @onclick="() => RemoveItemFromCart(item.VariantId)" class="fa fa-trash text-dark" style="cursor: pointer;"></i>
                                                    </td>


                                                </tr>


                                                }
                                            <tr>
                                                <td class="cart-summary" colspan="4">
                                                    <div class="summary-container">
                                                        <div class="summary-row">
                                                            <div class="field">Cart Subtotal</div>
                                                            <div class="value">€@CalculateCartTotal()</div>
                                                        </div>
                                                        <div class="summary-row text-danger">
                                                            <div class="field">Free Shipping</div>
                                                            <div class="value">$0.00</div>
                                                        </div>
                                                        <div class="summary-row total">
                                                            <div class="field">Total</div>
                                                            <div class="value">€@CalculateCartTotal()</div>

                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                    }

                            </div>
                        </div>

                        }
                    else if (currentStep == 2)
                        {
                        <CheckoutInfo @ref="checkoutInfoComponent" ShippingInfo="shippingInfo" />
                        }
                    else if (currentStep == 3)
                        {
                        <CheckoutPayment  Order="@order"/>

                        }
                    @*else if (currentStep == 4)
                        {
                        <CheckoutComplete PlaceOrderCallback="PlaceOrder" />
                        }*@
                </div>
                <div class="checkout-footer d-flex justify-content-between">
                    @if (currentStep > 1)
                        {
                        <button type="button" @onclick="BackStep" class="btn btn-white btn-theme me-auto w-150px">Back</button>
                        }

                    <div class="ms-auto">
                        @if (currentStep < 4)
                            {
                            <button type="button" @onclick="NextStep" class="btn btn-dark btn-sm btn-theme w-150px">Next</button>
                            }


                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

<div id="policy" class="section-container bg-component">
    <div class="container">
        <div class="row">
            <div class="col-lg-4 col-md-4 mb-4 mb-md-0">
                <div class="policy">
                    <div class="policy-icon"><i class="fa fa-truck"></i></div>
                    <div class="policy-info">
                        <h4>Free Delivery Over $100</h4>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-4 mb-4 mb-md-0">
                <div class="policy">
                    <div class="policy-icon"><i class="fa fa-umbrella"></i></div>
                    <div class="policy-info">
                        <h4>1 Year Warranty For Phones</h4>
                        <p>Cras laoreet urna id dui malesuada gravida. <br />Duis a lobortis dui.</p>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-4">
                <div class="policy">
                    <div class="policy-icon"><i class="fa fa-user-md"></i></div>
                    <div class="policy-info">
                        <h4>6 Month Warranty For Accessories</h4>
                        <p>Fusce ut euismod orci. Morbi auctor, sapien non eleifend iaculis.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<CartItemDto> CartItems = new List<CartItemDto>();
    private CheckoutInfo checkoutInfoComponent;
    private int currentStep = 1;
    private Order shippingInfo = new Order();
    private bool isUserLoggedIn;
    long CustomerId = 0;
    Order order = new Order();


    protected override async Task OnAfterRenderAsync(bool firstRender)
        {
        if (firstRender)
            {
            try
                {

                await CheckUserSessionAsync();
                CartItems = await CartService.GetItems();

                if (CartItems == null || !CartItems.Any())
                    {
                    ShowMessage("Your cart is empty. Add some items before placing an order.", "danger");
                    NavigationManager.NavigateTo("/empty-cart");
                    return;
                    }



                var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
                var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
                var paymentStatus = query["paymentStatus"];
                if (paymentStatus == "success")
                    {
                    currentStep = 4; ;


                    ShowMessage("Payment completed successfully!", "success");
                    }
                else if (paymentStatus == "failed")
                    {
                    currentStep = 4; ;
                    ShowMessage("Payment failed. Please try again.", "danger");
                    }



                StateHasChanged();
                }
            catch (Exception ex)
                {
                Console.WriteLine("Error loading cart items: " + ex.Message);
                ShowMessage(ex.Message.ToString(), "danger");
                }
            }
        }

    private async Task CheckUserSessionAsync()
        {
        try
            {
            var resultUser = await ProtectedLocalStor.GetAsync<string>("UserName");
            var resultId = await ProtectedLocalStor.GetAsync<long>("CustomerId");

            if (!resultUser.Success || !resultId.Success || string.IsNullOrWhiteSpace(resultUser.Value) || resultId.Value == 0)
                {
                RedirectToLogin();
                return;
                }

            CustomerId = resultId.Value;
            var userName = resultUser.Value;
            isUserLoggedIn = true;
            }
        catch
            {
            // Catch all exceptions and redirect to login
            RedirectToLogin();
            }
        }

    private void RedirectToLogin()
        {
        NavigationManager.NavigateTo("/login", forceLoad: true);
        }


    private async void SetStep(int step)
        {
        if (step == 3)
            {
            if (!ValidateShippingInfo())
                return;
            }
        else if(step==4)
            {

            return;
            }

        currentStep = step;
        }

    private double CalculateCartTotal()
        {
        return CartItems.Sum(item => item.VariantPrice * item.Qty);
        }

    private async Task RemoveItemFromCart(long variantId)
        {
        await CartService.RemoveItem(variantId);
        CartItems = await CartService.GetItems();
        StateHasChanged();
        ShowMessage("Item removed successfully", "success");
        }

    private async Task NextStep()
        {


        if (currentStep == 2)
            {
            if(ValidateShippingInfo())
                {
                await  PlaceOrder();
                }
            else
                {
                return;
                }

            }
        if (currentStep < 4)
            {
            currentStep++;
            }



        }

    private void BackStep()
        {
        if (currentStep > 1)
            {
            currentStep--;
            }
        }

    private async Task PlaceOrder()
        {
        try
            {

            order = new Order
                {
                FirstName = shippingInfo.FirstName,
                LastName = shippingInfo.LastName,
                StreetAddress = shippingInfo.StreetAddress,
                AreaCode = shippingInfo.AreaCode,
                PrimaryPhone = shippingInfo.PrimaryPhone,
                ZipCode = shippingInfo.ZipCode,
                IsBusinessAddress = shippingInfo.IsBusinessAddress,
                CustomerId = CustomerId,
                OrderNumber = GenerateOrderNumber(),
                TotalAmount = CartItems.Sum(item => item.VariantPrice * item.Qty)
                };
            foreach (var cartItem in CartItems)
                {
                order.OrderItems.Add(new OrderItem
                    {
                    ProductName = cartItem.VariantName,
                    Price = cartItem.VariantPrice,
                    ProductId = cartItem.ProductId,
                    VariantId = cartItem.VariantId,
                    Quantity = cartItem.Qty
                    });
                }

            var response = await OrderService.PlaceOrder(order);

            if (response != null && response.Success)
                {
                order = response.Data;

                /*
                ShowMessage("Order placed successfully.", "success");
                await CartService.DeleteItems();
                CartItems.Clear();
                CartStateService.CartItemCount = 0;
                */


                StateHasChanged();
                ;

                }
            else
                {

                string errorMessage = response?.Message ?? "Unknown error occurred during order placement.";
                Console.WriteLine("Error placing order: " + errorMessage);
                ShowMessage("Error placing order: " + errorMessage, "danger");
                }
            }
        catch (Exception ex)
            {
            Console.WriteLine("Exception during order placement: " + ex.Message);
            ShowMessage("An error occurred while placing the order. Please try again.", "danger");
            }
        }
    private void ShowMessage(string message, string type)
        {
        IJSRuntime.InvokeVoidAsync("showAlert", message, type);
        }
    private bool ValidateShippingInfo()
        {
        if (checkoutInfoComponent == null)
            {
            ShowMessage("Shipping information is missing.", "danger");
            return false;
            }

        var shippingInfo = checkoutInfoComponent.ShippingInfo;

        if (string.IsNullOrEmpty(shippingInfo.FirstName) ||
            string.IsNullOrEmpty(shippingInfo.LastName) ||
            string.IsNullOrEmpty(shippingInfo.StreetAddress) ||
            string.IsNullOrEmpty(shippingInfo.AreaCode) ||
            string.IsNullOrEmpty(shippingInfo.PrimaryPhone) ||
            string.IsNullOrEmpty(shippingInfo.ZipCode))
            {
            ShowMessage("Please fill out all the required shipping information.", "danger");
            currentStep = 2;
            return false;
            }

        return true;
        }
    public string GenerateOrderNumber()
        {
        return $"ORD-{DateTime.UtcNow:yyyyMMdd}-{Guid.NewGuid().ToString().Substring(0, 8).ToUpper()}";
        }

}


<script>
    function showAlert(message, type) {
        const alertDiv = document.getElementById('alert');
        alertDiv.textContent = message;

        // Remove previous class if any
        alertDiv.classList.remove('success', 'error', 'info', 'warning');

        // Add appropriate class for alert type
        alertDiv.classList.add(type);

        alertDiv.style.display = 'block'; // Show the alert
        alertDiv.style.opacity = '1'; // Make it visible
        alertDiv.style.visibility = 'visible'; // Ensure visibility is toggled

        setTimeout(function () {
            alertDiv.style.opacity = '0'; // Fade out
            alertDiv.style.visibility = 'hidden'; // Hide after fading out
        }, 10000); // Hide after 5 seconds
    }
</script>