@inject SidebarStateService SidebarStateService
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims;
@inject IJSRuntime JS
<div id="sidebar" class="app-sidebar" data-bs-theme="dark">
    <div class="app-sidebar-content" data-scrollbar="true" data-height="100%">
        <div class="menu">

            <div class="menu-profile">
                <a href="javascript:;" class="menu-profile-link" data-toggle="app-sidebar-profile" data-target="#appSidebarProfileMenu">
                    <div class="menu-profile-cover with-shadow"></div>
                    <div class="menu-profile-image">
                        <img src="../assets/img/user/user-13.jpg" alt="" />
                    </div>
                    <div class="menu-profile-info">
                        <div class="d-flex align-items-center">
                            <div class="flex-grow-1">
                                @UserName
                            </div>
                            <div class="menu-caret ms-auto"></div>
                        </div>
                        <small>Administrator</small>
                    </div>
                </a>
            </div>
            <div class="menu-header">Navigation</div>


            @foreach (var menu in Menus)
                {
                if (HasPermission(menu.PermissionId) || menu.SubItems.Any(subItem => HasPermission(subItem.PermissionId)))
                    {

                    var isOpen = SidebarStateService.IsMenuOpen(menu.Title);
                    <div class="menu-item has-sub @(isOpen ? "active" : "")">
                        <a href="javascript:;" class="menu-link" @onclick="() => ToggleMenuAsync(menu.Title)">
                            <div class="menu-icon">
                                <i class="@(menu.IconClass)"></i>
                            </div>
                            <div class="menu-text">@menu.Title</div>
                            <div class="menu-caret"></div>
                        </a>
                        <div class="menu-submenu @(isOpen ? "show" : "")">
                            @foreach (var subItem in menu.SubItems)
                                {
                                if (HasPermission(subItem.PermissionId))
                                    {
                                    <div class="menu-item">
                                        <NavLink href="@subItem.Route" class="menu-link">
                                            <div class="menu-text">@subItem.Title</div>
                                        </NavLink>
                                    </div>
                                    }
                                }
                        </div>
                    </div>
                    }
                }
        </div>
    </div>
</div>

@code {
    private List<MenuItem> Menus = new List<MenuItem>
{
    new MenuItem
    {
        Title = "Dashboard",
        IconClass = "fa fa-sitemap",
        Routes = new List<string> { "/" },
        PermissionId = 1,
        SubItems = new List<SubMenuItem>
{
            new SubMenuItem { Title = "Dashboard 1", Route = "/", PermissionId = 1 }
        }
    },
    new MenuItem
    {
        Title = "Setup Data",
        IconClass = "fa fa-table",
        Routes = new List<string> { "/BrandList", "/ModelYearList", "/SizeList", "/ColorList" },
        PermissionId = 2,
        SubItems = new List<SubMenuItem>
{
            new SubMenuItem { Title = "Brands", Route = "/BrandList", PermissionId = 12 },
            new SubMenuItem { Title = "Model Years", Route = "/ModelYearList", PermissionId = 13 },
            new SubMenuItem { Title = "Sizes", Route = "/SizeList", PermissionId = 14 },
            new SubMenuItem { Title = "Colors", Route = "/ColorList", PermissionId = 15 }
        }
    },
    new MenuItem
    {
        Title = "Specifications",
        IconClass = "fa fa-tree",
        Routes = new List<string> { "/ClusterList", "/FeatureList" },
        PermissionId = 3,
        SubItems = new List<SubMenuItem>
{
            new SubMenuItem { Title = "Clusters", Route = "/ClusterList", PermissionId = 16 },
            new SubMenuItem { Title = "Features", Route = "/FeatureList", PermissionId = 17 }
        }
    },
    new MenuItem
    {
        Title = "Catalogs",
        IconClass = "fa fa-tree",
        Routes = new List<string> { "/CatalogList" },
        PermissionId = 4,
        SubItems = new List<SubMenuItem>
{
            new SubMenuItem { Title = "Catalogs", Route = "/CatalogList", PermissionId = 4 }
        }
    },
    new MenuItem
    {
        Title = "Product",
        IconClass = "fab fa-simplybuilt",
        Routes = new List<string> { "/MainProductList" },
        PermissionId = 5,
        SubItems = new List<SubMenuItem>
{
                new SubMenuItem { Title = "Product", Route = "/MainProductList", PermissionId = 5 },
                new SubMenuItem { Title = "Variant", Route = "/ProductVariantList", PermissionId = 5 },
                new SubMenuItem { Title = "Objects", Route = "/VariantObjects", PermissionId = 5 }
        }
    },
    new MenuItem
    {
        Title = "Category",
        IconClass = "fab fa-dashcube",
        Routes = new List<string> { "/AddCategory" },
        PermissionId = 6,
        SubItems = new List<SubMenuItem>
{
            new SubMenuItem { Title = "Category", Route = "/AddCategory", PermissionId = 6 }
        }
    },
    new MenuItem
    {
        Title = "Users & Management",
        IconClass = "fa fa-key",
        Routes = new List<string> { "/UserList", "/RoleList" },
        PermissionId = 8,
        SubItems = new List<SubMenuItem>
{
            new SubMenuItem { Title = "Register", Route = "/UserList", PermissionId = 18 },
            new SubMenuItem { Title = "Role", Route = "/RoleList", PermissionId = 19 }
        }
    },
    new MenuItem
    {
        Title = "Configuration",
        IconClass = "fa fa-key",
        Routes = new List<string> { "/SliderList", "/AddEditTrendingItems","/CategoriesOrder" },
        PermissionId = 9,
        SubItems = new List<SubMenuItem>
{
            new SubMenuItem { Title = "Sliders", Route = "/SliderList", PermissionId = 20 },
            new SubMenuItem { Title = "Setting", Route = "/ConfigurationList", PermissionId = 21 }  ,
             new SubMenuItem { Title = "Category Order", Route = "/CategoriesOrder", PermissionId = 7 }
        }
    },
    new MenuItem
    {
        Title = "Customer & Agent",
        IconClass = "fa fa-key",
        Routes = new List<string> { "/AgentList" },
        PermissionId = 10,
        SubItems = new List<SubMenuItem>
{
            new SubMenuItem { Title = "Agents", Route = "/AgentList", PermissionId = 22 }
        }
    },
    new MenuItem
    {
        Title = "Email",
        IconClass = "fa fa-envelope",
        Routes = new List<string> { "/Inbox" },
        PermissionId = 11,
        SubItems = new List<SubMenuItem>
{
            new SubMenuItem { Title = "Email", Route = "/Inbox", PermissionId = 11 }
        }
    }
};

    private bool isInitialized = false;
    private bool IsAgent = false;
    public List<int> UserPermissions { get; set; } = new List<int>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
        {

        if (firstRender && !isInitialized)
            {
            isInitialized = true;
            await SidebarStateService.LoadStateAsync();

            StateHasChanged();
            }

        try
            {
            await JS.InvokeVoidAsync("handleThemePanel");
            await JS.InvokeVoidAsync("handleResetLocalStorage");
            }
        catch (Exception ex)
            {

            }


        }



    private async Task ToggleMenuAsync(string menuId)
        {
        await SidebarStateService.ToggleMenuAsync(menuId);
        }

    private class MenuItem
        {
        public string Title { get; set; }
        public string IconClass { get; set; }
        public List<string> Routes { get; set; }
        public List<SubMenuItem> SubItems { get; set; }
        public int PermissionId { get; set; }
        }

    private class SubMenuItem
        {
        public string Title { get; set; }
        public string Route { get; set; }
        public int PermissionId { get; set; }
        }


    public string UserName = "";
    protected override async Task OnInitializedAsync()
        {

        try
            {


            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
                {

                UserName = user.Identity.Name;
                var isAgentClaim = user.FindFirst(ClaimTypes.Actor)?.Value;
                IsAgent = isAgentClaim == "Agent";
                UserPermissions = user.Claims
                              .Where(c => c.Type == ClaimTypes.Role)
                              .Select(c => int.Parse(c.Value))
                              .ToList();
                }
            }
        catch (Exception ex)
            {

            }

        }



    private bool HasPermission(int permissionId)
        {
        return UserPermissions.Contains(permissionId);
        }
}
<script src="/assets/js/app.min.js"></script>