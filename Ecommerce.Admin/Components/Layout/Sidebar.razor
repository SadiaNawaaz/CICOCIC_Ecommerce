@inject SidebarStateService SidebarStateService
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<div id="sidebar" class="app-sidebar" data-bs-theme="dark">
    <div class="app-sidebar-content" data-scrollbar="true" data-height="100%">
        <div class="menu">

            <div class="menu-profile">
                <a href="javascript:;" class="menu-profile-link" data-toggle="app-sidebar-profile" data-target="#appSidebarProfileMenu">
                    <div class="menu-profile-cover with-shadow"></div>
                    <div class="menu-profile-image">
                        <img src="../assets/img/user/user-13.jpg" alt="" />
                    </div>
                    <div class="menu-profile-info">
                        <div class="d-flex align-items-center">
                            <div class="flex-grow-1">
                                @UserName
                            </div>
                            <div class="menu-caret ms-auto"></div>
                        </div>
                        <small>Administrator</small>
                    </div>
                </a>
            </div>
            <div class="menu-header">Navigation</div>

            <!-- Dynamic Menu Items -->
            @foreach (var menu in Menus)
            {
                var isOpen = SidebarStateService.IsMenuOpen(menu.Title);
                <div class="menu-item has-sub @(isOpen ? "active" : "")">
                    <a href="javascript:;" class="menu-link" @onclick="() => ToggleMenuAsync(menu.Title)">
                        <div class="menu-icon">
                            <i class="@(menu.IconClass)"></i>
                        </div>
                        <div class="menu-text">@menu.Title</div>
                        <div class="menu-caret"></div>
                    </a>
                    <div class="menu-submenu @(isOpen ? "show" : "")">
                        @foreach (var subItem in menu.SubItems)
                        {
                            <div class="menu-item">
                                <NavLink href="@subItem.Route" class="menu-link">
                                    <div class="menu-text">@subItem.Title</div>
                                </NavLink>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<MenuItem> Menus = new List<MenuItem>
{
    new MenuItem
    {
        Title = "Dashboard",
        IconClass = "fa fa-sitemap",
        Routes = new List<string> { "/" },
        SubItems = new List<SubMenuItem>
    {
            new SubMenuItem { Title = "Dashboard 1", Route = "/" }
        }
    },
    new MenuItem
    {
        Title = "Setup Data",
        IconClass = "fa fa-table",
        Routes = new List<string> { "/BrandList", "/ModelYearList", "/SizeList", "/ColorList" },
        SubItems = new List<SubMenuItem>
    {
            new SubMenuItem { Title = "Brands", Route = "/BrandList" },
            new SubMenuItem { Title = "Model Years", Route = "/ModelYearList" },
            new SubMenuItem { Title = "Sizes", Route = "/SizeList" },
            new SubMenuItem { Title = "Color", Route = "/ColorList" },
        }
    },
    new MenuItem
    {
        Title = "Specifications",
        IconClass = "fa fa-tree",
        Routes = new List<string> { "/ClusterList", "/FeatureList" },
        SubItems = new List<SubMenuItem>
    {
            new SubMenuItem { Title = "Clusters", Route = "/ClusterList" },
            new SubMenuItem { Title = "Features", Route = "/FeatureList" },

        }
    },
        new MenuItem
    {
        Title = "Catalogs",
        IconClass = "fa fa-tree",
        Routes = new List<string> { "/CatalogList"},
        SubItems = new List<SubMenuItem>
    {
            new SubMenuItem { Title = "Catalogs", Route = "/CatalogList" },
          

        }
    },

    new MenuItem
    {
        Title = "Product",
        IconClass = "fab fa-simplybuilt",
        Routes = new List<string> { "/MainProductList" },
        SubItems = new List<SubMenuItem>
    {
            new SubMenuItem { Title = "Product", Route = "/MainProductList" }
        }
    },
    new MenuItem
    {
        Title = "Category",
        IconClass = "fab fa-dashcube",
        Routes = new List<string> { "/AddCategory" },
        SubItems = new List<SubMenuItem>
    {
            new SubMenuItem { Title = "Category", Route = "/AddCategory" }
        }
    },
    new MenuItem
    {
        Title = "Category Order",
        IconClass = "fab fa-dashcube",
        Routes = new List<string> { "/CategoriesOrder" },
        SubItems = new List<SubMenuItem>
    {
            new SubMenuItem { Title = "Category Order", Route = "/CategoriesOrder" }
        }
    },
    new MenuItem
    {
        Title = "Users & Management",
        IconClass = "fa fa-key",
        Routes = new List<string> { "/UserList", "/RoleList" },
        SubItems = new List<SubMenuItem>
    {
            new SubMenuItem { Title = "Register", Route = "/UserList" },
            new SubMenuItem { Title = "Role", Route = "/RoleList" }
        }
    },
    new MenuItem
    {
        Title = "Configuration",
        IconClass = "fa fa-key",
        Routes = new List<string> { "/SliderList", "/AddEditTrendingItems" },
        SubItems = new List<SubMenuItem>
    {
            new SubMenuItem { Title = "Sliders", Route = "/SliderList" },
            new SubMenuItem { Title = "Trending Items", Route = "/AddEditTrendingItems" }
        }
    },
    new MenuItem
    {
        Title = "Customer & Agent",
        IconClass = "fa fa-key",
        Routes = new List<string> { "/AgentList" },
        SubItems = new List<SubMenuItem>
    {
            new SubMenuItem { Title = "Agents", Route = "/AgentList" }
        }
    },
    new MenuItem
    {
        Title = "Email",
        IconClass = "fa fa-envelope",
        Routes = new List<string> { "/Inbox" },
        SubItems = new List<SubMenuItem>
    {
            new SubMenuItem { Title = "Email", Route = "/Inbox" }
        }
    }
};


    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;
            await SidebarStateService.LoadStateAsync();
            StateHasChanged(); // Force the component to re-render after loading the state
        }
    }

    private async Task ToggleMenuAsync(string menuId)
    {
        await SidebarStateService.ToggleMenuAsync(menuId);
    }

    private class MenuItem
    {
        public string Title { get; set; }
        public string IconClass { get; set; }
        public List<string> Routes { get; set; }
        public List<SubMenuItem> SubItems { get; set; }
    }

    private class SubMenuItem
    {
        public string Title { get; set; }
        public string Route { get; set; }
    }


    public string UserName = "";
    protected override async Task OnInitializedAsync()
    {

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {

                UserName = user.Identity.Name;

            }
        }
        catch (Exception ex)
        {

        }

    }
}
