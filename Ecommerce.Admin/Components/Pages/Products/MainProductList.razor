@page "/MainProductList"
@using Ecommerce.Shared.Entities.Products
@using Ecommerce.Shared.Services.Products;
@inject IProductService ProductService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))
<div class="d-flex align-items-center mb-3">
    <div>
        <ol class="breadcrumb mb-2">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active">Products</li>
        </ol>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <div class="panel panel-inverse">
            <div class="panel-heading">
                <h4 class="panel-title">Products</h4>
                <div class="panel-heading-btn">
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
                </div>
            </div>
            <div class="panel-body">
                <button class="btn btn-primary mb-3" @onclick="NavigateToAddProduct">Add Product</button>
                <MudDataGrid T="ProductDto" Items="@products" ColumnResizeMode="@(_resizeColumn ? ResizeMode.Column : ResizeMode.Container)" RowsPerPage="5" Striped="true" Bordered="true">
                    <ColGroup>
                        <col style="width: 70%;" />
                        <col style="width: 20%;" />
                        <col style="width: 10%;" />
                    </ColGroup>
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Name" />
                        <PropertyColumn Property="x => x.Stock" Title="Stock" />
                        <PropertyColumn Property="x => x.Price" Title="Price" />
                        <PropertyColumn Property="x => x.Category" Title="Category" />
              


                        <TemplateColumn CellClass="d-flex justify-end">
                            <HeaderTemplate>
                                <div>Actions</div>
                            </HeaderTemplate>
                            <CellTemplate>
                                <MudStack Row>

                                    <MudIconButton Icon="@Icons.Material.Filled.AddBox" Size="Size.Small" Class="text-success" OnClick="() => AddVariants(context.Item.Id)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="text-warning" OnClick="() => EditProduct(context.Item.Id)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="text-danger" OnClick="() => DeleteProduct(context.Item)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.List" Size="Size.Small" Class="text-info" OnClick="() => ListProductVariants(context.Item.Id)" />

                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="ProductDto" PageSizeOptions="@(new int[] { 5, 10, 20 })" />
                    </PagerContent>
                </MudDataGrid>
            </div>
        </div>
    </div>
</div>

@code {

    private bool _resizeColumn = true;
    private List<ProductDto> products = new List<ProductDto>();

    [Inject]
    public IDialogService DialogService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            var response = await ProductService.GetProductsWithVariantsAsync();
            if (response.Success)
            {
                products = response.Data;
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
            }
        }

        catch (Exception ex)
        {

        }
    }

    private void NavigateToAddProduct()
    {
        NavigationManager.NavigateTo("/MainProduct");
    }




    private void AddVariants(long ProductId)
    {

        NavigationManager.NavigateTo($"/AddEditProductVariants?Id=0&ProductId={ProductId}");
    }

    private void ListProductVariants(long ProductId)
    {

        NavigationManager.NavigateTo($"/ProductVariantList?ProductId={ProductId}");
    }


    private void EditProduct(long productId)
    {
        NavigationManager.NavigateTo($"/MainProduct/{productId}");
    }

    private async Task DeleteProduct(ProductDto product)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Do you want to confirm?");
            parameters.Add("ButtonText", "Yes");
            var dialogresult = DialogService.Show<DeleteDialog>("Confirm", parameters);
            var result = await dialogresult.Result;
            if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out bool resultbool))
                await DeleteProduct(product.Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while attempting to delete the product: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in DeleteProduct: {ex}");
        }
    }

    private async Task DeleteProduct(long productId)
    {
        var response = await ProductService.DeleteProductAsync(productId);
        if (response.Success)
        {
            Snackbar.Add(response.Message, Severity.Success);
            await LoadProducts();
        }
        else
            Snackbar.Add(response.Message, Severity.Error);
    }
}
