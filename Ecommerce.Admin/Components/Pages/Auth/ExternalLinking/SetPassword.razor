@page "/auth/set-password"
@using Microsoft.AspNetCore.WebUtilities
@using System.ComponentModel.DataAnnotations
@using System.Linq
@inject NavigationManager Nav
@using Layout
@layout LoginLayout
@using Ecommerce.Shared.Services.Integrations;
@inject IBikeListingIngestionService _bikeListingIngestionService;


<div class="d-flex justify-content-center align-items-center min-vh-100 bg-light">
    <div class="card shadow-lg border-0" style="max-width: 450px; width: 100%;">
        <div class="card-body">
            <div class="text-center mb-3">
                <h3 class="mb-1">Set your password</h3>
                <p class="text-muted mb-0">Finish securing your account and publish your asset.</p>
            </div>

            @if (invalidLink)
                {
                <div class="alert alert-danger" role="alert">@message</div>
                }
            else if (done)
                {
                <div class="alert alert-success" role="alert">
                    @message
                    <div class="mt-2">
                        <a class="btn btn-primary w-100" href="/login">Go to Sign In</a>
                    </div>
                </div>
                }
            else
                {
                <EditForm EditContext="editContext" OnValidSubmit="OnSubmitAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <input type="hidden" value="@productId" />

                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input class="form-control" value="@email" disabled />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">New Password</label>
                        <div class="input-group">
                            <input class="form-control"
                                   type="@(showPassword ? "text" : "password")"
                                   placeholder="Enter a strong password"
                                   value="@vm.Password"
                                   @oninput="OnPasswordInput" />
                            <button type="button"
                                    class="btn btn-outline-secondary"
                                    title="Show/Hide"
                                    @onclick="ToggleShowPassword">
                                <span>@(showPassword ? "Hide" : "Show")</span>
                            </button>
                        </div>
                        <small class="text-muted">At least 8 characters, with a mix of letters, numbers, and symbols.</small>

                        <div class="progress mt-2" style="height:6px;">
                            <div class="@($"progress-bar {StrengthBarClass}")"
                                 role="progressbar"
                                 style="@($"width:{StrengthPercent}%")">
                            </div>
                        </div>
                        <div class="d-flex justify-content-between mt-1">
                            <small class="@($"fw-semibold {StrengthTextClass}")">@StrengthLabel</small>
                            <small class="text-muted">@StrengthHints</small>
                        </div>

                        <span class="text-danger">
                            <ValidationMessage For="@(() => vm.Password)" />
                        </span>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Confirm Password</label>
                        <div class="input-group">
                            <input class="form-control"
                                   type="@(showConfirm ? "text" : "password")"
                                   placeholder="Re-enter password"
                                   value="@vm.ConfirmPassword"
                                   @oninput="OnConfirmInput" />
                            <button type="button"
                                    class="btn btn-outline-secondary"
                                    title="Show/Hide"
                                    @onclick="ToggleShowConfirm">
                                <span>@(showConfirm ? "Hide" : "Show")</span>
                            </button>
                        </div>

                        @if (!string.IsNullOrWhiteSpace(vm.ConfirmPassword))
                            {
                            <small class="mt-1 d-inline-block @(vm.Password == vm.ConfirmPassword ? "text-success" : "text-danger")">
                                @(vm.Password == vm.ConfirmPassword ? "Passwords match" : "Passwords do not match")
                            </small>
                            }

                        <span class="text-danger">
                            <ValidationMessage For="@(() => vm.ConfirmPassword)" />
                        </span>
                    </div>

                    <button class="btn btn-primary w-100" disabled="@busy">
                        @if (busy)
                            {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                        Set Password
                    </button>
                </EditForm>

                @if (!string.IsNullOrEmpty(message))
                    {
                    <div class="mt-3 alert @(error ? "alert-danger" : "alert-info")" role="alert">@message</div>
                    }
                }
        </div>
    </div>
</div>

@code {
    private long productId;
    private string? email;

    private bool invalidLink;
    private bool error;
    private bool done;
    private bool busy;
    private string? message;

    private bool showPassword;
    private bool showConfirm;

    private int strengthPercent = 0;
    private string strengthLabel = "Too weak";
    private string strengthHints = "Add length & variety";
    private int StrengthPercent => strengthPercent;
    private string StrengthLabel => strengthLabel;
    private string StrengthHints => strengthHints;
    private string StrengthBarClass =>
        strengthPercent < 34 ? "bg-danger" :
        strengthPercent < 67 ? "bg-warning" :
        "bg-success";
    private string StrengthTextClass =>
        strengthPercent < 34 ? "text-danger" :
        strengthPercent < 67 ? "text-warning" :
        "text-success";

    private readonly SetPasswordVm vm = new();
    private EditContext? editContext;

    private class SetPasswordVm
        {
        [Required, MinLength(8, ErrorMessage = "Password must be at least 8 characters.")]
        public string Password { get; set; } = "";

        [Required, Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = "";
        }

    protected override async Task OnInitializedAsync()
        {
        editContext = new EditContext(vm);

        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var q = QueryHelpers.ParseQuery(uri.Query);

        if (q.TryGetValue("productId", out var p) && long.TryParse(p, out var pid))
            productId = pid;

        if (q.TryGetValue("email", out var e))
            email = e.ToString();

        if (productId <= 0 || string.IsNullOrWhiteSpace(email))
            {
            invalidLink = true;
            message = "Missing product or email.";
            return;
            }

        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
        var gate = await _bikeListingIngestionService.GetResetPasswordGateAsync(productId, email!, cts.Token);

        if (!gate.Allow)
            {
            invalidLink = true;
            message = gate.Message ?? "This link cannot be used.";
            return;
            }

        invalidLink = false;
        message = "Enter a new password to claim this listing.";
        }

    private void OnPasswordInput(ChangeEventArgs e)
        {
        vm.Password = e.Value?.ToString() ?? string.Empty;
        EvaluateStrength(vm.Password);
        editContext?.NotifyFieldChanged(new FieldIdentifier(vm, nameof(vm.Password)));
        }

    private void OnConfirmInput(ChangeEventArgs e)
        {
        vm.ConfirmPassword = e.Value?.ToString() ?? string.Empty;
        editContext?.NotifyFieldChanged(new FieldIdentifier(vm, nameof(vm.ConfirmPassword)));
        }

    private void ToggleShowPassword() => showPassword = !showPassword;
    private void ToggleShowConfirm() => showConfirm = !showConfirm;

    private void EvaluateStrength(string pwd)
        {
        if (string.IsNullOrEmpty(pwd))
            {
            strengthPercent = 0;
            strengthLabel = "Too weak";
            strengthHints = "Add length & variety";
            return;
            }

        int score = 0;
        if (pwd.Length >= 8) score++;
        if (pwd.Length >= 12) score++;
        if (pwd.Any(char.IsLower)) score++;
        if (pwd.Any(char.IsUpper)) score++;
        if (pwd.Any(char.IsDigit)) score++;
        if (pwd.Any(ch => !char.IsLetterOrDigit(ch))) score++;

        strengthPercent = Math.Min(100, (int)(score / 6.0 * 100));

        if (strengthPercent < 34)
            {
            strengthLabel = "Weak";
            strengthHints = "Use upper/lower, numbers, symbols";
            }
        else if (strengthPercent < 67)
            {
            strengthLabel = "Moderate";
            strengthHints = "Add more length & symbols";
            }
        else
            {
            strengthLabel = "Strong";
            strengthHints = "Looks good";
            }
        }

    private async Task OnSubmitAsync()
        {
        if (busy) return;
        error = false;
        message = null;

        if (string.IsNullOrWhiteSpace(email) || productId <= 0)
            {
            invalidLink = true;
            message = "Missing product or email.";
            return;
            }

        busy = true;
        try
            {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30));
            var result = await _bikeListingIngestionService
                .SetPasswordAndClaimAsync(productId, email!, vm.Password, cts.Token);

            if (result.Allow)
                {
                done = true;
                message = result.Message ?? "Your password has been set. Listing activated.";
                }
            else
                {
                error = true;
                message = result.Message ?? "Could not set password.";
                }
            }
        catch (OperationCanceledException)
            {
            error = true;
            message = "Request canceled. Please try again.";
            }
        catch (Exception)
            {
            error = true;
            message = "Something went wrong while setting your password. Please try again.";
            }
        finally
            {
            busy = false;
            }
        }
}