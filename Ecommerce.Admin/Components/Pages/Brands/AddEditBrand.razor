@page "/AddEditBrand/{BrandId:long?}"
@using Ecommerce.Shared.Entities.Brands
@inject IBrandService BrandService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using Ecommerce.Shared.Services.Brands;
@using Ecommerce.Shared.Services.Shared;
@rendermode InteractiveServer
@inject ImageResizeService ImageResizeService
@inherits AuthenticatedComponent
<div class="d-flex align-items-center mb-3">
    <div>
        <ol class="breadcrumb mb-2">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item"><a href="/BrandList">Brands</a></li>
            <li class="breadcrumb-item active">Brand</li>
        </ol>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <div class="panel panel-inverse">
            <div class="panel-heading">
                <h4 class="panel-title">Brand Form</h4>
                <div class="panel-heading-btn">
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
                </div>
            </div>
            <div class="panel-body">
                <EditForm Model="@brand" OnValidSubmit="@HandleValidSubmit" FormName="brandForm">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-5 mb-3">
                            <label for="Name">Name</label>
                            <InputText id="Name" class="form-control" @bind-Value="brand.Name" />
                            <ValidationMessage For="@(() => brand.Name)" />
                        </div>
                        <div class="col-5 mb-3">
                            <label for="ImageUrl">Image /Logo</label>
                            @*<InputText id="ImageUrl" class="form-control" @bind-Value="brand.ImageUrl" />*@


                            <InputFile id="productImage" OnChange="@HandleFileChange" class="form-control" />

                            <ValidationMessage For="@(() => brand.ImageUrl)" />
                        </div>

                        <div class="col-2 mt-15px">
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>

                        <div class="col-xxl-3 col-md-6">
                            <div>
                                @if (brand.ImageUrl != null)
                                {

                                    <div style="display:inline-block; margin: 10px; position: relative;">
                                        <img src="@(!string.IsNullOrEmpty(imageUrl) ? imageUrl : brand.ImageUrl)" alt="Image Preview" style="height:150px;width:150px" />
                                        <button type="button" @onclick="DeleteImage" class="btn btn-danger btn-sm" style="position: absolute; top: 10px; right: 10px;">X</button>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="col-12">

                            <a href="javascript:history.back(-1);" class="btn btn-success">
                                <i class="fa fa-arrow-circle-left"></i> Back to previous page
                            </a>



                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public long? BrandId { get; set; }
    private Brand brand = new Brand();
    private IBrowserFile file;
    private string imageUrl = null;
    private bool ImageDel = false;
    private string ImageDelPath = null;
    protected override async Task OnInitializedAsync()
        {
        await base.OnInitializedAsync();
        if (BrandId.HasValue)
            {
            var response = await BrandService.GetBrandByIdAsync(BrandId.Value);
            if (response.Success)
                {
                brand = response.Data;
                brand.ImageUrl = "/Brands/" + brand.Id + "/" + brand.ImageUrl;
                StateHasChanged();
                }
            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }
            }
        }

    private async Task HandleValidSubmit()
        {
        try
            {
            ServiceResponse<Brand> response;
            if (BrandId.HasValue)
                {
                brand.LastModifiedBy = UserId;
                response = await BrandService.UpdateBrandAsync(brand);
                }
            else
                {
                brand.CreatedBy = UserId;

                response = await BrandService.AddBrandAsync(brand);
                }

            if (response.Success)
                {
                var brandImagesPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Brands", brand.Id.ToString());

                if (!Directory.Exists(brandImagesPath))
                    {
                    Directory.CreateDirectory(brandImagesPath);
                    }

                if (ImageDel)
                    {
                    var wwwRootPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot");
                    var DelImagePath = wwwRootPath + ImageDelPath;
                    if (File.Exists(DelImagePath))
                        {
                        File.Delete(DelImagePath);
                        }
                    }

                if (brand.ImageByte != null)
                    {
                    var filePath = Path.Combine(brandImagesPath, brand.ImageUrl);
                    await File.WriteAllBytesAsync(filePath, brand.ImageByte);
                    //brand.ImageUrl = $"/brands/{brand.Id}/{brand.ImageUrl}";

                    }
                Snackbar.Add(response.Message, Severity.Success);
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/BrandList");

                }
            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }
            }
        catch (Exception ex)
            {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            }
        }

    private void GoBack()
        {
        NavigationManager.NavigateTo("/BrandList");
        }

    async Task HandleFileChange(InputFileChangeEventArgs e)
        {
        var maxSizeBytes = 512000; // Maximum allowed size in bytes (500 KB)



        try
            {
            file = e.File;

            if (file.Size <= maxSizeBytes)
                {
                using var memoryStream = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(memoryStream);
                var uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                memoryStream.Position = 0;
                imageUrl = await ImageResizeService.ResizeImage(memoryStream, file.ContentType, 150, 150);
                memoryStream.Position = 0;
                var buffer = memoryStream.ToArray();
                brand.ImageByte = buffer;
                brand.ImageUrl = uniqueFileName;
                }
            else
                {
                Snackbar.Add("Please Choose file under limit  (500 KB)", Severity.Error);
                }
            }
        catch (Exception ex)
            {
            Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    void DeleteImage()
        {
        ImageDelPath = brand.ImageUrl;
        file = null;
        imageUrl = null;
        brand.ImageUrl = null;
        ImageDel = true;


        }
}
