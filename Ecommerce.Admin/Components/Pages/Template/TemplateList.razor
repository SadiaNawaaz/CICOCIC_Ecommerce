@page "/TemplateList"
@using Ecommerce.Shared.Entities.Templates
@using Ecommerce.Shared.Services.Templates
@inject ITemplateService TemplateService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using Pages.Shared

<div class="d-flex align-items-center mb-3">
    <div>
        <ol class="breadcrumb mb-2">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active">Templates</li>
        </ol>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <div class="panel panel-inverse">
            <div class="panel-heading">
                <h4 class="panel-title">Templates</h4>
                <div class="panel-heading-btn">
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
                </div>
            </div>
            <div class="panel-body">
                <button class="btn btn-primary mb-3" @onclick="NavigateToAddTemplate">Add Template</button>
                <MudDataGrid T="TemplateMaster" Items="@templates" ColumnResizeMode="@(_resizeColumn ? ResizeMode.Column : ResizeMode.Container)" RowsPerPage="5" Striped="true" Bordered="true">
                    <ColGroup>
                        <col style="width: 80%;" />
                        <col style="width: 20%;" />
                     
                    </ColGroup>
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Name" />
                        <TemplateColumn CellClass="d-flex justify-end">
                            <HeaderTemplate>
                                <div>Manage Records</div>
                            </HeaderTemplate>
                            <CellTemplate>
                                <MudStack Row>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="text-warning" OnClick="() => EditTemplate(context.Item.Id)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="text-danger" OnClick="() => DeleteTemplate(context.Item)" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="TemplateMaster" PageSizeOptions="@(new int[] { 5, 10, 20 })" />
                    </PagerContent>
                </MudDataGrid>
            </div>
        </div>
    </div>
</div>

@code {

    private bool _resizeColumn = true;
    private List<TemplateMaster> templates;
    [Inject]
    public IDialogService DialogService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplates();
    }

    private async Task LoadTemplates()
    {
        var response = await TemplateService.GetTemplateMastersAsync();
        if (response.Success)
        {
            templates = response.Data;
        }
        else
        {
            Snackbar.Add(response.Message, Severity.Error);
        }
    }

    private void NavigateToAddTemplate()
    {
        NavigationManager.NavigateTo("/AddEditTemplate");
    }

    private void EditTemplate(long templateId)
    {
        NavigationManager.NavigateTo($"/AddEditTemplate/{templateId}");
    }

    private async Task DeleteTemplate(TemplateMaster template)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Do you want to confirm?");
            parameters.Add("ButtonText", "Yes");
            var dialogresult = DialogService.Show<DeleteDialog>("Confirm", parameters);
            var result = await dialogresult.Result;
            if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out bool resultbool))
                await DeleteTemplate(template.Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while attempting to delete the template: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in DeleteTemplate: {ex}");
        }
    }

    private async Task DeleteTemplate(long templateId)
    {
        var response = await TemplateService.DeleteTemplateMasterAsync(templateId);
        if (response.Success)
        {
            Snackbar.Add(response.Message, Severity.Success);
            await LoadTemplates();
        }
        else
        {
            Snackbar.Add(response.Message, Severity.Error);
        }
    }
}
