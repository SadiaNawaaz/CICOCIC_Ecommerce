@page "/TemplateCategoryLinkList"
@inject ITemplateCategoryService TemplateCategoryService
@using Ecommerce.Shared.Services.TemplateCategories;
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using Ecommerce.Shared.Entities.Templates;


<div class="d-flex align-items-center mb-3">
    <div>
        <ol class="breadcrumb mb-2">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item"><a href="/ClusterList">Template Category</a></li>
            <li class="breadcrumb-item active"><i class="fa fa-arrow-back"></i> Category</li>
        </ol>

    </div>
</div>


<div class="panel panel-inverse">
    <!-- BEGIN panel-heading -->
    <div class="panel-heading">
        <h4 class="panel-title">Template Category - List</h4>
        <div class="panel-heading-btn">
            <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
        </div>
    </div>
    <!-- END panel-heading -->
    <!-- BEGIN panel-body -->
    <div class="panel-body">
        <div class="row fileupload-buttonbar">
            <div class="col-xl-7">

                <button type="button" class="btn btn-primary start me-1" @onclick="NavigateToAddEditTemp">
                    <i class="fa fa-fw fa-add"></i>
                    <span>Add new</span>
                </button>

                <!-- The global file processing state -->
                <span class="fileupload-process"></span>
            </div>

            <div class="col-xl-5 fileupload-progress fade d-none d-xl-block">
                <div class="progress progress-striped active">
                    <div class="progress-bar progress-bar-success" style="width:0%;"></div>
                </div>
                <div class="progress-extended">&nbsp;</div>
            </div>
        </div>
        <MudDataGrid T="TemplateCategory" Items="@templateCategories" ColumnResizeMode="@(_resizeColumn ? ResizeMode.Column : ResizeMode.Container)" RowsPerPage="5" Striped="true" Bordered="true">
            <ColGroup>
                <col style="width: 45%;" />
                <col style="width: 45%;" />
                @*<col style="width: 10%;" />*@

                <col />
            </ColGroup>
            <Columns>
                <PropertyColumn Property="x => x.Category.Name" Title="Group/Category" />
                <PropertyColumn Property="x => x.TemplateMaster.Name" Title="Template" />
                @*<TemplateColumn CellClass="d-flex justify-end" Style="width:10%">
                    <HeaderTemplate>
                        <div>Edit</div>
                    </HeaderTemplate>
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="text-warning" OnClick="() => Editrecord(context.Item)" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>*@
            </Columns>

            <PagerContent>
                <MudDataGridPager T="TemplateCategory" PageSizeOptions=@(new int[] {5, 10, 20}) />
            </PagerContent>
        </MudDataGrid>



    </div>

</div>





@code {

    #region Veriable
    private bool _resizeColumn;
    private IEnumerable<TemplateCategory> templateCategories = new List<TemplateCategory>();
    private string _searchString;
    #endregion

    #region Get



    protected override async Task OnInitializedAsync()
    {
        await LoadList();
    }

    private async Task LoadList()
    {
        try
        {
            var response = await TemplateCategoryService.GetTemplateCategoriesAsync();
            if (response.Success)
            {
                templateCategories = response.Data;
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while loading List: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in LoadList: {ex}");
        }
    }
    #endregion


    #region Edit 

    private void Editrecord(TemplateCategory cluster)
    {
        try
        {
            NavigationManager.NavigateTo($"/AddEditCluster/{cluster.Id}");
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while navigating to edit the cluster: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in EditCluster: {ex}");
        }
    }
    #endregion

    private void NavigateToAddEditTemp()
    {
        try
        {
            NavigationManager.NavigateTo("/TemplateCategoryLink");
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while navigating to add or edit a model year: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in NavigateToAddEditModelYear: {ex}");
        }
    }
}
