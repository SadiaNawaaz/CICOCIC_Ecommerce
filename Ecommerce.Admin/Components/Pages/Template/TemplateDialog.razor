@page "/template-dialog"
@inject ISnackbar Snackbar
@using Ecommerce.Shared.Services.Features
@using Ecommerce.Shared.Services.Clusters
@inject IFeatureService FeatureService
@inject IClusterService ClusterService
@using Ecommerce.Admin.Components.Pages.Categories;
@using Ecommerce.Shared.Entities;
@using Ecommerce.Shared.Entities.Clusters;
@using Ecommerce.Shared.Entities.Features;
@using Ecommerce.Shared.Entities.Templates;
@using Ecommerce.Shared.Services.Clusters;
@using Ecommerce.Shared.Services.Features;
@using Microsoft.Extensions.Options;
@using Radzen
@using Radzen.Blazor
<div class="row m-10px">
    <fieldset>
        <legend class="mb-3">Cluster</legend>

        <div class="col-lg-6 mb-3">
            <label class="form-label" for="templateInput">Cluster</label>
            <RadzenDropDownDataGrid @bind-Value="cluster.Id" Data="@Clusters" TextProperty="Name" ValueProperty="Id" Name="DropDownDataGridTemplate" class="form-control" TValue="long" Change="@(args => OnClusterChange(args))">
                <Template>
                    @context.Name
                </Template>
            </RadzenDropDownDataGrid>
        </div>

        <div class="col-lg-12">
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label class="form-label" for="passwordInput">Feature</label>
                    <RadzenDropDownDataGrid @bind-Value="objFeature.Id" Data="@Features" TextProperty="Name" ValueProperty="Id" Name="DropDownfeaturesTemplate" class="form-control" TValue="long">
                        <Template>
                            @context.Name
                        </Template>
                    </RadzenDropDownDataGrid>
                </div>

                <div class="col-md-2 mt-20px">
                    <button type="button" class="btn btn-primary" @onclick="AddToList">Add To List</button>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    @if (TemplateClusterFeatures != null && TemplateClusterFeatures.Count() > 0)
                    {
                        int i = 0;
                        <table id="data-table-fixed-columns" width="100%" class="table table-striped table-bordered align-middle text-nowrap">
                            <thead>
                                <tr>
                                    <th width="5%">#</th>
                                    <th class="text-nowrap">Feature Name</th>
                                    <th width="1%">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in TemplateClusterFeatures)
                                {
                                    i++;
                                    <tr>
                                        <td>@i</td>
                                        <td>@item.Feature.Name</td>
                                        <td width="1%">
                                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromList(item)">Remove</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
         
            <div class="row">
                <div class="col-md">
                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-primary"  @onclick="Save" >Save</button>
                
                    </div>
                </div>
            </div>
        </div>
    </fieldset>
</div>
@code {
    [CascadingParameter] private MudDialogInstance Dialog { get; set; }
    [Parameter] public List<Feature> Features { get; set; }
    [Parameter] public List<Cluster> Clusters { get; set; }
    [Parameter] public List<TemplateClusterFeature> TemplateClusterFeatures { get; set; }
    private Cluster cluster = new Cluster();
    private Cluster selectedCluster = new Cluster();
    private Feature objFeature = new Feature();

    private void AddToList()
    {
        if (cluster.Id == 0)
        {
            Snackbar.Add("Select clusters:", Severity.Info);
            return;
        }
        else if (objFeature.Id == 0)
        {
            Snackbar.Add("Select Feature:", Severity.Info);
            return;
        }
        else
        {
            var fet = Features.FirstOrDefault(a => a.Id == objFeature.Id);
            var feature = new TemplateClusterFeature { FeatureId = objFeature.Id, Feature = fet };
            TemplateClusterFeatures.Add(feature);
            feature.Id = 0;
            StateHasChanged();
        }
    }

    private void RemoveFromList(TemplateClusterFeature feature)
    {
        TemplateClusterFeatures.Remove(feature);
        StateHasChanged();
    }
    private void Save()
    {
        if (cluster.Id == 0)
        {
            Snackbar.Add("Please Select clusters:", Severity.Info);
            return;
        }
       

        var result = new { TemplateClusterFeatures, cluster };
        Dialog.Close(DialogResult.Ok(result));
    }
    private void OnClusterChange(object args)
    {
        long selectedClusterId = Convert.ToInt64(args);
        selectedCluster = Clusters.FirstOrDefault(c => c.Id == selectedClusterId);
        cluster = selectedCluster;
        StateHasChanged();
    }
}