
@page "/AddCategory"
@page "/category-tree"
@using Ecommerce.Shared.Dto;
@inject IDialogService DialogService
@using Ecommerce.Shared.Services.Categories;
@inject ICategoryService CategoryService
@inject ISnackbar Snackbar
@using Ecommerce.Shared.Services.Shared;
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<style>
    .custom-tree-item {
        color: gray;
        font-weight: bold;
    }

    .custom-tree-item-selected {
        color: rgb(13 16 18);
        background-color: rgb(185 207 231 / 10%);
        font-weight: bold;
    }

</style>


<div class="col-xl-12">

    <div class="panel panel-inverse" data-sortable-id="tree-view-1" style="min-height:500px">
        <div class="panel-heading">
            <h4 class="panel-title">Category
               
            </h4>
            <div class="panel-heading-btn">
                <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
                <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
                <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
                <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
            </div>
        </div>
        <div class="panel-body">
            <div class="mb-2">
                <button href="javascript:;" class="btn btn-sm btn-General" @onclick="() => OpenAddDialog(null)">
                    <span class="d-flex align-items-center text-start">
                        <i class="fab fa-plus"></i>
                        <span>
                            <span class="d-block"><b> &nbsp;Main Level</b></span>

                        </span>
                    </span>
                </button>
            </div>
            @if (IsLoading)
            {
                <div class="text-center">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                </div>
            }

       
            <MudTreeView Items="@TreeItems" Hover="true" Width="100%">
                <ItemTemplate Context="item">
                    <MudTreeViewItem Class="@GetItemClass(item)" @onclick="() => SelectItem(item)" Items="@item.SubCategories" sm="6">                                                       
                        <BodyContent>
                            @if (!string.IsNullOrEmpty(item.Icon))
                            {

                                var icon = "/Category/" + item.Id.ToString() + "/" + item.Icon;

                                <img src="@icon" alt="@icon" style="height: 24px; width: 24px" />
                            }
                            else
                            {
                                <i class="fas fa-lg fa-fw me-10px fa-folder-open"></i>
                            }
                            <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">

                                <MudText Style="justify-self: start;">&nbsp;&nbsp;&nbsp; @item.Name </MudText>
                                <div style="justify-self: end;">




                                    <MudTooltip Text="Edit">
                                        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Class="text-success btn btn-sm" OnClick="() => OpenAddDialog(item)" />
                                    </MudTooltip>
                                    <MudTooltip Text="Edit">
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" class="text-warning btn btn-sm" OnClick="() => OpenEditDialog(item)" />
                                    </MudTooltip>
                                    <MudTooltip Text="Delete">
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" class="text-danger btn btn-sm" OnClick="() => ConfirmRemoveDialog(item)" />
                                    </MudTooltip>
                                </div>
                            </div>
                        </BodyContent>
                    </MudTreeViewItem>
                </ItemTemplate>
            </MudTreeView>
        </div>

    </div>

</div>



@code {

    private HashSet<CategoryDto> TreeItems { get; set; } = new HashSet<CategoryDto>();
    private bool IsLoading { get; set; } = false;

    #region

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoryTreeAsync();
    }

    private async Task LoadCategoryTreeAsync()
    {
        try
        {
            IsLoading = true;
            var response = await CategoryService.GetCategoriesAsync();
            if (response.Success)
            {
                var categories = response.Data;
                TreeItems = categories.Where(c => c.ParentCategoryId == null)
                              .Select(MapToCategoryDto)
                              .ToHashSet();
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while loading category tree: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        }
    }

    #endregion
    #region Save_Edit

    private async Task OpenAddDialog(CategoryDto? item)
    {
        try
        {
            var options = new DialogOptions { CloseButton = true, FullWidth = true };
            var parameters = new DialogParameters { ["Item"] = item ?? new CategoryDto() };
            var result = await DialogService.Show<NewGeneralCategory>(string.Empty, parameters, options).Result;
            string value = result.Data as string ?? string.Empty;
            if (!result.Cancelled && value != null)
            {


                var data = result.Data as dynamic;
                string newCategoryName = data.Name ?? string.Empty;
                string newCategoryIcon = data.Icon ?? string.Empty;
                byte[] newCategoryImageByte = data.ImageByte ?? Array.Empty<byte>();

                if (!string.IsNullOrEmpty(newCategoryName))
                {

                    if (item == null)
                    {
                        var category = new Category
                        {
                            Name = newCategoryName,

                            Level = 1,
                            ParentCategoryId = null,
                            Icon = newCategoryIcon ?? string.Empty,
                            ImageByte = newCategoryImageByte,




                        };

                        Category cate= await SaveOrUpdateCategoryAsync(category);
                        if(cate!=null)
                        {
                            TreeItems.Add(new CategoryDto { Name = newCategoryName, Level = category.Level, Id = category.Id, ParentCategoryId = category.ParentCategoryId,Icon= cate.Icon });
                        }

                    }
                    else
                    {
                        var category = new Category
                        {
                            Name = newCategoryName,
                            Icon = newCategoryIcon ?? string.Empty,
                            ImageByte = newCategoryImageByte,
                            Level = item.Level + 1,
                            ParentCategoryId = item.Id
                        };
                        Category cate = await SaveOrUpdateCategoryAsync(category);

                        if (cate != null)
                        {
                            item.SubCategories.Add(new CategoryDto { Name = newCategoryName, Level = category.Level, Id = category.Id, ParentCategoryId = category.ParentCategoryId,Icon = cate.Icon });
                        }

                    }
                }
            }
        }


        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }
    private async Task OpenEditDialog(CategoryDto item)
    {

        try
        {
            var options = new DialogOptions { CloseButton = true, FullWidth = true };
            var parameters = new DialogParameters { ["Item"] = item ?? new CategoryDto(), ["IsEdit"] = true };
            var result = await DialogService.Show<NewGeneralCategory>(string.Empty, parameters, options).Result;

            if (!result.Cancelled)
            {

                var data = result.Data as dynamic;
                string newName = data.Name ?? string.Empty;
                string newCategoryIcon = data.Icon ?? string.Empty;
                byte[] newCategoryImageByte = data.ImageByte ?? Array.Empty<byte>();

                if (!string.IsNullOrEmpty(newName))
                {
                    item.Name = newName;

                    var category = new Category
                    {
                        Id = item.Id,
                        Name = item.Name,
                        Icon = newCategoryIcon ?? string.Empty,
                        ImageByte = newCategoryImageByte,
                        Level = item.Level,
                        ParentCategoryId = item.ParentCategoryId,

                    };

                    await SaveOrUpdateCategoryAsync(category);
                }
            }

        }

        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }
    private async Task<Category> SaveOrUpdateCategoryAsync(Category category)
    {
        try
        {
            ServiceResponse<Category> response;
            if (category.Id == 0)
            {
                response = await CategoryService.AddCategoryAsync(category);
            }
            else
            {
                response = await CategoryService.UpdateCategoryAsync(category);
            }
            if (response.Success)
            {
                Snackbar.Add(response.Message, Severity.Success);


                var CategoryImagesPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Category", category.Id.ToString());


                if (category.ImageByte != null && category.ImageByte.Length > 0)
                {


                    if (Directory.Exists(CategoryImagesPath))
                    {
                        Directory.Delete(CategoryImagesPath, true);
                    }

                    if (!Directory.Exists(CategoryImagesPath))
                    {
                        Directory.CreateDirectory(CategoryImagesPath);
                    }

                    var filePath = Path.Combine(CategoryImagesPath, category.Icon);
                    await File.WriteAllBytesAsync(filePath, category.ImageByte);

                    category.Icon = category.Icon;
                }



                return category;
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
                return null;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            return null;
        }
    }
    #endregion

    private CategoryDto MapToCategoryDto(Category category)
    {
        return new CategoryDto
        {
            Id = category.Id,
            Name = category.Name,
            Icon = category.Icon,
            Level = category.Level,
            ParentCategoryId = category.ParentCategoryId,
            SubCategories = category.SubCategories?.Select(MapToCategoryDto).ToHashSet()
        };
    }

    #region Remove

    private async Task ConfirmRemoveDialog(CategoryDto item)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete '{item.Name}'?",
            yesText: "Yes", cancelText: "No"
        );

        if (result == true)
        {



            var success = await DeleteCategoryAsync(item.Id);
            if (success)
            {
                Snackbar.Add("Category deleted successfully", Severity.Success);

                var CategoryImagesPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Category", item.Id.ToString());


                if (Directory.Exists(CategoryImagesPath))
                {
                    Directory.Delete(CategoryImagesPath, true);
                }

                await LoadCategoryTreeAsync();
            }

        }
    }



    private async Task<bool> DeleteCategoryAsync(long id)
    {
        try
        {
            var response = await CategoryService.DeleteCategoryAsync(id);
            return response.Success;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while deleting category: {ex.Message}", Severity.Error);
            return false;
        }
    }


    private async Task<bool> RemoveCategoryAndDeleteAsync(HashSet<CategoryDto> categories, long id)
    {
        var itemToRemove = categories.FirstOrDefault(c => c.Id == id);
        if (itemToRemove != null)
        {
            if (await DeleteCategoryAsync(id))
            {
                categories.Remove(itemToRemove);

                Snackbar.Add(itemToRemove.Name+ "Category deleted successfully", Severity.Success);
                return true;
            }
            else
            {
                Snackbar.Add("Failed to delete category", Severity.Error);
                return false;
            }
        }
        else
        {
            foreach (var category in categories)
            {
                if (await RemoveCategoryAndDeleteAsync(category.SubCategories, id))
                {
                    Snackbar.Add("Category deleted successfully", Severity.Success);
                    return true;
                }
            }
        }

        Snackbar.Add("Category not found", Severity.Warning);
        return false;
    }


    private void CollectCategoriesToDelete(CategoryDto category, HashSet<CategoryDto> categoriesToDelete)
    {
        categoriesToDelete.Add(category);
        foreach (var subCategory in category.SubCategories)
        {
            CollectCategoriesToDelete(subCategory, categoriesToDelete);
        }
    }

    #endregion


    private CategoryDto _selectedItem;
    private string GetItemClass(CategoryDto item)
    {
        return item == _selectedItem ? "custom-tree-item custom-tree-item-selected" : "custom-tree-item";
    }

    private string GetIcon(CategoryDto item)
    {
        return item.Icon; ;
    }

    private void SelectItem(CategoryDto item)
    {
        _selectedItem = item;
    }
}