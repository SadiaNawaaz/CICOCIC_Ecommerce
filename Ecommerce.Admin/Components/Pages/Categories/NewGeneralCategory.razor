@rendermode InteractiveServer
@using Ecommerce.Shared.Dto;
@inject ImageResizeService ImageResizeService
<div class="col-xl-12">



    <div class="panel panel-inverse" data-sortable-id="form-validation-1">
        <div class="panel-body">

            <div class="d-flex align-items-center mb-3">
                <h4 class="modal-title d-flex align-items-center"> <small class="fs-13px fw-bold ms-2"><b>@category.Name</b></small></h4>

            </div>
            <div class="form-group">
                <label class="col-lg-4 col-form-label form-label" for="Cate"></label>
                <div class="col-lg-12">
                    <input class="form-control" type="text" @bind="@this.input" />
                </div>
            </div>
            <div class="form-group">
                <label class="col-lg-4 col-form-label form-label" for="Icon">Icon Image</label>
                <div class="col-lg-12">

                    <InputFile id="productImage" OnChange="@HandleFileChange" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                @if (!string.IsNullOrEmpty(imageUrl))
                {

                
                    <div style="display:inline-block; position: relative;">
                        <img src="@imageUrl" alt="Image Preview" style="height:100px" />
                       
                    </div>
                }
            </div>
            <div class="form-group row mt-20px">
                <label class="col-lg-5 col-form-label form-label">&nbsp;</label>
                <div class="col-lg-7">
                    <button type="submit" class="btn btn-primary" @onclick="@this.OK">Submit</button>

                </div>
            </div>

        </div>


    </div>

</div>




@code {
    private string input = string.Empty;
    CategoryDto category = new CategoryDto();
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public CategoryDto Item { get; set; }
    [Parameter]
    public bool IsEdit { get; set; }
    //private void OK() => this.MudDialog.Close(DialogResult.Ok(this.input));

    protected override void OnInitialized()
    {

        // category = Item;


        if (category == null)
        {
            category = new CategoryDto();
        }

        if (IsEdit)
        {
            category = Item;
            input = category.Name;
            imageUrl = "/Category/" + category.Id.ToString() + "/" + category.Icon;
        }

        if(Item!=null)
        {
            category.Name = Item.Name;
        }

    }


    private IBrowserFile? selectedFile;
    private string imageUrl = string.Empty;
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            var extension = Path.GetExtension(file.Name).ToLower();
            var uniqueFileName = $"{Guid.NewGuid()}{extension}";

            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(memoryStream);

            if (extension == ".svg")
            {
                // SVG files are directly used without resizing
                memoryStream.Position = 0;
                var buffer = memoryStream.ToArray();
                imageUrl = $"data:image/svg+xml;base64,{Convert.ToBase64String(buffer)}";
                category.ImageByte = buffer;
            }
            else
            {
                // Resize other image formats
                memoryStream.Position = 0;
                imageUrl = await ImageResizeService.ResizeImage(memoryStream, file.ContentType, 150, 150);
                memoryStream.Position = 0;
                var buffer = memoryStream.ToArray();
                category.ImageByte = buffer;
            }

            category.Icon = uniqueFileName;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }



    private void OK()
    {
        var result = new { Name = input, Icon = category.Icon, ImageByte = category.ImageByte };
        MudDialog.Close(DialogResult.Ok(result));
    }

}
