


@using Ecommerce.Shared.Dto;
@inject IDialogService DialogService
@using Ecommerce.Shared.Services.Categories;
@inject ICategoryService CategoryService
@inject ISnackbar Snackbar
@using Ecommerce.Shared.Services.Shared;
@inject ILanguageService languageService
@rendermode @(new InteractiveServerRenderMode(prerender: false))



<style>
    .custom-tree-item {
        color: gray;
        font-weight: bold;
    }

    .custom-tree-item-selected {
        color: rgb(13 16 18);
        background-color: rgb(185 207 231 / 10%);
        font-weight: bold;
    }
</style>

@if (IsLoading)
    {
    <div class="text-center">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
    }
else
    {
    @if (_selectedItem != null)
        {
        <span>Selected Category : <b> @_selectedItem.Name </b> </span>
        <hr />
        }
    if (TreeItems.Count() < 1 || TreeItems == null)
        {
        <span>Please wait....</span>
        }

    <MudTreeView Items="@TreeItems" Hover="true" Width="100%" T="CategoryDto">
        <ItemTemplate Context="item">
            <MudTreeViewItem @onclick="() => SelectItem(item.Value)"
                             Items="@item.Children"
                             Expanded="@item.Value.IsExpanded"
                             ExpandedChanged="@((bool expanded) => OnToggleClicked(item.Value, expanded))">
                <BodyContent>
                    <i class="fas fa-lg fa-fw me-10px fa-folder-open"></i>
                    <MudText>&nbsp;&nbsp;&nbsp; @item.Value.Name </MudText>
                </BodyContent>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>



    }



@code {

    private List<TreeItemData<CategoryDto>> TreeItems { get; set; } = new List<TreeItemData<CategoryDto>>();
    private bool IsLoading { get; set; } = false;

    [Parameter]
    public EventCallback<CategoryDto> OnCategorySelected { get; set; }

    [Parameter]
    public long SelectedCategoryId { get; set; }

    protected override async Task OnInitializedAsync()
        {
        await LoadCategoryTreeAsync();
        }


    private async Task LoadCategoryTreeAsync()
        {
        try
            {
            IsLoading = true;
            var response = await CategoryService.GetCategoriesAsyncWithTranslation(null);

            if (response.Success)
                {
                // Ensure Children is always initialized
                TreeItems = response.Data.Select(category => new TreeItemData<CategoryDto>
                    {
                    Value = category,
                    Children = category.SubCategories != null
                        ? category.SubCategories.Select(sub => new TreeItemData<CategoryDto>
                            {
                            Value = sub,
                            Children = new List<TreeItemData<CategoryDto>>(), // Always initialize Children
                            Expanded = sub.IsExpanded
                            }).ToList()
                        : new List<TreeItemData<CategoryDto>>() // Ensure it is not null
                    }).ToList();
                }
            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }
            }
        catch (Exception ex)
            {
            Snackbar.Add($"An error occurred while loading category tree: {ex.Message}", Severity.Error);
            }
        finally
            {
            IsLoading = false;
            StateHasChanged(); // Force UI update
            }
        }

    private CategoryDto _selectedItem;

    private async void SelectItem(CategoryDto item)
        {
        var response = await CategoryService.GetCategoriesByParentId(item.Id, 1);

        if (response.Success)
            {
            item.SubCategories = response.Data;
            var treeItem = FindTreeItem(TreeItems, item.Id);
            if (treeItem != null)
                {

                if (treeItem != null)
                    {
                    treeItem.Children = response.Data.Select(sub => ConvertToTreeItemData(sub)).ToList();
                    treeItem.Expanded = true;
                    }
                }
            StateHasChanged();
            }
        else
            {
            Snackbar.Add(response.Message, Severity.Error);
            }

        _selectedItem = item;




        await OnCategorySelected.InvokeAsync(item);
        StateHasChanged();
        }

    private void OnToggleClicked(CategoryDto item, bool isExpanded)
        {
        if (item.IsExpanded != isExpanded)
            {
            item.IsExpanded = isExpanded;
            }

        Console.WriteLine($"Toggled: {item.Name}, Expanded: {isExpanded}");

        if (isExpanded)
            {
            SelectItem(item);
            }
        else
            {
            Console.WriteLine($"Node '{item.Name}' collapsed");
            }
        }

    private string GetItemClass(CategoryDto item)
        {
        return item == _selectedItem ? "custom-tree-item custom-tree-item-selected" : "custom-tree-item";
        }

    private TreeItemData<CategoryDto> FindTreeItem(List<TreeItemData<CategoryDto>> treeItems, long id)
        {
        foreach (var treeItem in treeItems)
            {
            if (treeItem.Value.Id == id)
                return treeItem;

            if (treeItem.Children != null)
                {
                var found = FindTreeItem(treeItem.Children.ToList(), id);
                if (found != null)
                    return found;
                }
            }
        return null;
        }
    private TreeItemData<CategoryDto> ConvertToTreeItemData(CategoryDto category)
        {
        return new TreeItemData<CategoryDto>
            {
            Value = category,
            Expanded = false,
            Children = category.SubCategories?.Select(sub => ConvertToTreeItemData(sub)).ToList() ?? new List<TreeItemData<CategoryDto>>()
            };
        }


}
