


@using Ecommerce.Shared.Dto;
@inject IDialogService DialogService
@using Ecommerce.Shared.Services.Categories;
@inject ICategoryService CategoryService
@inject ISnackbar Snackbar
@using Ecommerce.Shared.Services.Shared;
@inject ILanguageService languageService
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<style>
    .custom-tree-item {
        color: gray;
        font-weight: bold;
    }

    .custom-tree-item-selected {
        color: rgb(13 16 18);
        background-color: rgb(185 207 231 / 10%);
        font-weight: bold;
    }
</style>



@if (IsLoading)
    {
    <div class="text-center">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
    }
else
    {
    @if(_selectedItem!=null)
                    {
                    <span>Selected Category : <b> @_selectedItem.Name </b> </span>
                    <hr />
                    }
    if(TreeItems.Count()<1 || TreeItems==null)

                    {
                    <span>Please wait....</span>
                    }

    <MudTreeView Items="@TreeItems" Hover="true" Width="100%">
        <ItemTemplate Context="item">
            <MudTreeViewItem Class="@GetItemClass(item)" @onclick="() => SelectItem(item)" Items="@item.SubCategories" sm="6" Expanded="@item.IsExpanded" ExpandedChanged="@((bool expanded) => OnToggleClicked(item, expanded))">
                <BodyContent>
                    <i class="fas fa-lg fa-fw me-10px fa-folder-open"></i>
                    <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">

                        <MudText Style="justify-self: start;">&nbsp;&nbsp;&nbsp; @item.Name </MudText>
                        <div style="justify-self: end;">



                        </div>
                    </div>
                </BodyContent>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>

    }



@code {

    private HashSet<CategoryDto> TreeItems { get; set; } = new HashSet<CategoryDto>();
    private bool IsLoading { get; set; } = false;
    [Parameter]
    public EventCallback<CategoryDto> OnCategorySelected { get; set; }

    [Parameter]
    public long SelectedCategoryId { get; set; }


    protected override async Task OnInitializedAsync()
        {

        }




    protected override async Task OnAfterRenderAsync(bool firstRender)
        {
        if (firstRender)
            {



            await LoadCategoryTreeAsync();


            if (SelectedCategoryId != null && SelectedCategoryId > 0)
                {

                try
                    {
                    var response = await CategoryService.GetCategoryHierarchyAsync(SelectedCategoryId, "en");
                    if (response.Success)
                        {
                        var tree = await CategoryService.BuildCategoryTree(response.Data);
                        var treeitem = TreeItems.FirstOrDefault(a => a.Id == tree[0].Id);
                        treeitem.SubCategories = tree[0].SubCategories;
                        _selectedItem = FindCategoryById(TreeItems, SelectedCategoryId);

                        if (_selectedItem != null)
                            {               
                            ExpandParentNodes(TreeItems, response.Data);
                            _selectedItem.IsExpanded = true;
                            await OnCategorySelected.InvokeAsync(_selectedItem);

                            StateHasChanged();
                            }
                        }
                    }
                catch (Exception ex)
                    {

                    }


                
            }
        StateHasChanged();
        }
        }
    private void ExpandParentNodes(IEnumerable<CategoryDto> categories, IEnumerable<CategoryDto> hierarchy)
        {
        foreach (var parentCategory in hierarchy)
            {
            var node = FindCategoryById(categories, parentCategory.Id);
            if (node != null)
                {
                node.IsExpanded = true;
                }
            }
        }


    private async Task LoadCategoryTreeAsync()
        {
        try
            {
            IsLoading = true;
            var response = await CategoryService.GetCategoriesAsyncWithTranslation(null);

            if (response.Success)
                {
                TreeItems = new HashSet<CategoryDto>(response.Data);

                }
            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }
            }
        catch (Exception ex)
            {
            Snackbar.Add($"An error occurred while loading category tree: {ex.Message}", Severity.Error);
            }
        finally
            {
            IsLoading = false;
            }
        }



    private CategoryDto MapToCategoryDto(Category category)
        {
        return new CategoryDto
            {
            Id = category.Id,
            Name = category.Name,
            Icon = category.Icon,
            Level = category.Level,
            ParentCategoryId = category.ParentCategoryId,
            SubCategories = category.SubCategories?.Select(MapToCategoryDto).ToHashSet()
            };
        }



    private CategoryDto _selectedItem;
    private string GetItemClass(CategoryDto item)
        {
        return item == _selectedItem ? "custom-tree-item custom-tree-item-selected" : "custom-tree-item";
        }

    private string GetIcon(CategoryDto item)
        {
        return item.Icon; ;
        }

    private async void SelectItem(CategoryDto item)
        {

        var response = await CategoryService.GetCategoriesByParentId(item.Id, 1);

        if (response.Success)
            {

            item.SubCategories = new HashSet<CategoryDto>(response.Data);
            StateHasChanged();
            }
        else
            {
            Snackbar.Add(response.Message, Severity.Error);
            }

        _selectedItem = item;
        await OnCategorySelected.InvokeAsync(item);
        StateHasChanged();
        }

    private void OnToggleClicked(CategoryDto item, bool isExpanded)
        {
        if (item.IsExpanded != isExpanded)
            {
            item.IsExpanded = isExpanded;
            }


        Console.WriteLine($"Toggled: {item.Name}, Expanded: {isExpanded}");

        // Example custom logic:
        if (isExpanded)
            {
            SelectItem(item);
            // e.g., Load data dynamically here if needed
            }
        else
            {
            Console.WriteLine($"Node '{item.Name}' collapsed");
            }
        }
    private CategoryDto FindCategoryById(IEnumerable<CategoryDto> categories, long id)
        {
        foreach (var category in categories)
            {
            if (category.Id == id)
                return category;

            var subCategory = FindCategoryById(category.SubCategories ?? new HashSet<CategoryDto>(), id);
            if (subCategory != null)
                return subCategory;
            }
        return null;
        }

}