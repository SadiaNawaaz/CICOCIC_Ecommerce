@page "/AddEditCatalog"
@page "/AddEditCatalog/{Id:long?}"
@inject ISnackbar Snackbar
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Ecommerce.Shared.Dto;
@using Ecommerce.Shared.Services.Categories;
@inject ICategoryService CategoryService
@inject ITemplateCategoryService TemplateCategoryService
@inject ITemplateService TemplateService
@using Radzen
@using Radzen.Blazor
@inject IProductService IProductService
@using Ecommerce.Shared.Services.Brands;
@inject IBrandService BrandService
@using Ecommerce.Shared.Entities.Brands
@using Ecommerce.Shared.Entities.Catalogs;
@using Ecommerce.Shared.Services.Colors;
@using Ecommerce.Shared.Entities.Colors;
@inject IModelYearService modelYearService
@using Ecommerce.Shared.Services.Sizes;
@inject ISizeService SizeService
@inject IColorService ColorService
@using Ecommerce.Shared.Entities.Clusters
@using Ecommerce.Shared.Services.Clusters
@inject IClusterService clusterService
@using Ecommerce.Shared.Entities.Features
@using Ecommerce.Shared.Services.Features;
@inject IFeatureService FeatureService
@using Ecommerce.Shared.Services.Catalogs;
@inject ICatalogService CatalogService



    <EditForm Model="@catalog" OnValidSubmit="@HandleValidSubmit" FormName="brandForm" @onkeydown="HandleKeyDown">
        <DataAnnotationsValidator />

        <div class="d-flex align-items-center justify-content-between mb-3">
            <div>
                <ol class="breadcrumb mb-2">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/CatalogList">Catalogs</a></li>
                    <li class="breadcrumb-item active"><i class="fa fa-arrow-back"></i> Catalog</li>
                </ol>
                <h1 class="page-header mb-0"> Catalog </h1>
            </div>
            <div>
                <button type="submit" disabled style="display: none" aria-hidden="true"></button>
                <button type="submit" class="btn btn-success w-100px">Save</button>
            </div>
        </div>




        <div class="row">
            <div class="col-xl-8">
                <div class="card border-0 mb-4">
                    <div class="card-header h6 mb-0 bg-none p-3">
                        <i class="fa fa-dolly fa-lg fa-fw text-dark text-opacity-50 me-1"></i><b>Catalog Information</b>
                    </div>
                    <div class="card-body">

                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label">  Title</label>
                                <InputText @bind-Value="catalog.Name" class="form-control" id="exampleInputEmail2" placeholder="Title" />
                                <span class="text-danger"><ValidationMessage For="@(() => catalog.Name)" /> </span>
                            </div>

                            <div class="col-md-2">
                                <label class="form-label"> Code</label>
                                <InputText @bind-Value="catalog.Code" class="form-control" id="exampleInputEmail2" placeholder="Code" />
                                <span class="text-danger"><ValidationMessage For="@(() => catalog.Code)" /> </span>
                            </div>

                            <div class="col-md-4">
                                <label class="form-label"> Slug</label>
                                <InputText @bind-Value="catalog.Slug" class="form-control" id="exampleInputEmail2"  placeholder="Slug"/>
                            </div>

                        </div>

                        <div class="row">
                            <div class="col-md-12">
                                <label class="form-label">Description</label>
                                <div class="form-control p-0 overflow-hidden">
                                    <textarea class="textarea form-control" id="wysihtml5" placeholder="Enter text ..." rows="12" @bind="catalog.Description"></textarea>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12">
                                <label class="form-label">Short Description</label>
                                <div class="form-control p-0 overflow-hidden">
                                    <textarea class="textarea form-control" id="wysihtml5" placeholder="Enter text ..." rows="2" @bind="catalog.ShortDescription"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card border-0 mb-4">
                    <div class="card-header h6 mb-0 bg-none p-3">
                        <i class="fa fa-shield-halved fa-lg fa-fw text-dark text-opacity-50 me-1"></i> <b>Levels</b>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @if (catalog != null && catalog.Id > 0 && catalog.IntegratedId > 0&& catalog.Category!=null)
                                {

                                <div class="col-lg-6"> <b>Selected Category : @catalog.Category.Name</b></div>
                                <div class="col-lg-6"></div>
                                <br /> <br />
                                }
                        </div>

                        <div class="row">

                            <div class="card border-0 mb-4">
                                <div class="card-header h6 mb-0 bg-none p-3">
                                    <button type="button" class="btn btn-success w-100" data-bs-toggle="modal" data-bs-target="#product-category">
                                        <i class="fas fa-expand fa-lg fa-fw text-dark text-opacity-50 me-1"></i>
                                        <b>Select Category</b>
                                    </button>
                                </div>

                                <div class="modal" id="product-category">
                                    <div class="modal-dialog modal-lg modal-dialog-scrollable">
                                        <div class="modal-content">
                                            <div class="modal-header alert alert-success p-2">
                                                <h5>Catalog Categories</h5>
                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-hidden="true"></button>
                                            </div>
                                            <div class="modal-body">
                                                <Ecommerce.Admin.Components.Pages.Categories.ShowCategories OnCategorySelected="HandleCategorySelected" SelectedCategoryId="selectedCategoryId" />
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-white" @onclick="FnSelectCategory" data-bs-dismiss="modal">Select & Close</button>
                                                <a href="javascript:;" class="btn btn-white" data-bs-dismiss="modal">Close</a>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                     
                    </div>
                </div>

                <div class="card border-0 mb-4">
                    <div class="card-header h6 mb-0 bg-none p-3">
                        <button type="button" class="btn btn-success" style="width:100%" data-bs-toggle="modal" data-bs-target="#modal-without-animation">
                            <i class="fas fa-expand fa-lg fa-fw text-dark text-opacity-50 me-1"></i>
                            <b>Add/Edit Product Specifications</b>
                        </button>

                    </div>
                    <div>



                        <div class="modal" id="modal-without-animation">
                            <div class="modal-dialog modal-lg modal-dialog-scrollable">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h4 class="modal-title">Add/Edit Product Specifications</h4>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-hidden="true"></button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="row mb-9px">

                                            <div class="col-md-8">

                                                <RadzenAutoComplete TValue="Cluster"
                                                                    Data=@clusters
                                                                    TextProperty="Name"
                                                                    ValueProperty="Id" Style="width:100%"
                                                                    FilterOperator="StringFilterOperator.StartsWith"
                                                                    FilterDelay="100"
                                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                    InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Cluster Name" } })"
                                                                    Change="@(args => OnClusterChange(args))" />
                                            </div>
                                        </div>
                                        <div>
                                            @if (catalog != null && catalog.CatalogClusters != null && catalog.CatalogClusters.Count > 0)
                                                {
                                                <ul class="list-group" style="list-style-type: none; padding: 0;">
                                                    @foreach (var clus in catalog.CatalogClusters)
                                                        {
                                                        <li class="mb-3 p-0" style="border: 1px solid #e0e0e0; border-radius: 10px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);">
                                                            <!-- Cluster Heading -->
                                                            <div class="d-flex justify-content-between align-items-center alert alert-success p-2" style="border-radius: 10px 10px 0 0;">
                                                                <div>
                                                                    <strong>@clus.Cluster.Name</strong>
                                                                </div>
                                                                <div>
                                                                    <button class="btn btn-outline-secondary btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#collapseCluster-@clus.Cluster.Id" aria-expanded="false">
                                                                        <i class="fa fa-chevron-down"></i>
                                                                    </button>
                                                                    <button type="button" @onclick="() => RemoveCluster(clus)" class="btn btn-outline-danger btn-sm">
                                                                        <i class="fa fa-trash"></i>
                                                                    </button>

                                                                </div>
                                                            </div>

                                                            <!-- Cluster Features (Collapsible Content) -->
                                                            <div id="collapseCluster-@clus.Cluster.Id" class="collapse">
                                                                <div class="p-3" style="background-color: white; border-radius: 0 0 10px 10px;">
                                                                    @if (clus.CatalogClusterFeatures != null && clus.CatalogClusterFeatures.Count > 0)
                                                                        {
                                                                        @foreach (var f in clus.CatalogClusterFeatures)
                                                                            {
                                                                            <div class="row mb-2 align-items-center">
                                                                                <div class="col-md-2">
                                                                                    <span>@f.Feature.Name</span>
                                                                                </div>
                                                                                <div class="col-md-3">
                                                                                    <input type="text" class="form-control" value="@f.Value" />
                                                                                </div>
                                                                                <div class="col-md-1 text-end">
                                                                                    <button type="button" @onclick="() => RemoveFeature(clus, f)" class="btn btn-default d-block">
                                                                                        <i class="fa fa-trash"></i>
                                                                                    </button>
                                                                                </div>
                                                                            </div>
                                                                            }
                                                                        }
                                                                </div>
                                                            </div>
                                                        </li>
                                                        }
                                                </ul>
                                                }
                                        </div>

                                        <!--  <div class="accordion" id="catalogAccordion">

                 if (catalog != null && catalog.CatalogClusters != null && catalog.CatalogClusters.Count > 0)
                      {
                     foreach (var clus in catalog.CatalogClusters)
                          {
                          <div class="accordion-item">
                              <h2 class="accordion-header d-flex justify-content-between align-items-center alert-success" id="heading-clus.Cluster.Id">
                                  <button class="accordion-button alert alert-success" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-clus.Cluster.Id" aria-expanded="false" aria-controls="collapse-@clus.Cluster.Id">
                                      clus.Cluster.Name
                                  </button>
                            
                                        <button type="button" onclick="() => RemoveCluster(clus)" class="btn btn-outline-danger btn-sm mb-40px">
                                            <i class="fa fa-times"></i>
                                        </button>
                                        </h2>

                                        <div id="collapse-clus.Cluster.Id" class="accordion-collapse collapse" aria-labelledby="heading-clus.Cluster.Id" data-bs-parent="#catalogAccordion">
                                            <div class="accordion-body">
                                              
                                                foreach (var f in clus.CatalogClusterFeatures)
                                                    {
                                                    <div class="row mb-3 gx-3">
                                                        <div class="col-2">
                                                            <ul id="tag-size" class="primary">
                                                                <li>f.Feature.Name</li>
                                                            </ul>
                                                        </div>
                                                        <div class="col-4">
                                                            <input type="text" class="form-control" value="f.Value" />
                                                        </div>
                                                        <div class="col-1">
                                                            <button type="button" onclick="() => RemoveFeature(clus, f)" class="btn btn-default d-block"><i class="fa fa-trash"></i></button>
                                                        </div>
                                                    </div>
                                                    }
                                            </div>
                                        </div>
                                    </div>
                                    }
                            }
                            </div>-->

                            </div>
                                    <div class="modal-footer">
                                        <a href="javascript:;" class="btn btn-white" data-bs-dismiss="modal">Close</a>
                                    </div>
                                </div>
                            </div>
                        </div>


                      


                    </div>
                </div>





            </div>
            <div class="col-xl-4">
                <div class="card border-0 mb-3">
                    <div class="card-header h6 mb-0 bg-none p-3 d-flex">
                        <div class="flex-1">
                            <div> <i class="fa fa-circle-info fa-lg fa-fw text-dark text-opacity-50 me-1"></i><b>Information</b></div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-success">
                            Add Related Data
                        </div>
                        <div class="form-horizontal form-bordered">

                            <div class="form-group row">
                                <label class="form-label col-form-label col-lg-4">Brand</label>
                                <div class="col-lg-8">

                                    <select class="form-select" @bind="@catalog.BrandId">
                                        <option value="">-- Select Brand --</option>
                                        @foreach (var brand in Brands)
                                            {
                                            <option value="@brand.Id">@brand.Name</option>
                                            }
                                    </select>

                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="form-label col-form-label col-lg-4">Size</label>
                                <div class="col-lg-8">

                                    <select class="form-select" @bind="@catalog.GeneralSizeId">
                                        <option value="">-- Select Size --</option>
                                        @foreach (var size in Sizes.OrderBy(c => c.Name))
                                            {
                                            <option value="@size.Id">@size.Name</option>
                                            }
                                    </select>

                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="form-label col-form-label col-lg-4">
                                    Color &nbsp;&nbsp;


                                    <div>

                                        @if (catalog.GeneralColorId != null)
                                            {
                                            var selectedColor = colors.FirstOrDefault(c => c.Id == catalog.GeneralColorId);
                                            if (selectedColor != null)
                                                {


                                                <span class="badge" style="background-color:@selectedColor.HexCode; color:@selectedColor.HexCode;border-color:black"> . .</span>
                                                }
                                            }


                                    </div>

                                </label>

                                <div class="col-lg-8">
                                    <select class="form-select" @bind="@catalog.GeneralColorId">
                                        <option value="">-- Select Color --</option>
                                        @if (colors != null && colors.Count > 0)
                                            {
                                            foreach (var col in colors.OrderBy(c => c.Name))
                                                {
                                                <option value="@col.Id">@col.Name</option>
                                                }
                                            }
                                    </select>


                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="form-label col-form-label col-lg-4">Build Year</label>
                                <div class="col-lg-8">

                                    <select class="form-select" @bind="@catalog.ModelYearId">
                                        <option value="">-- Select Model Year --</option>
                                        @foreach (var modelYear in ModelYears.OrderBy(c => c.Year))
                                            {
                                            <option value="@modelYear.Id">@modelYear.Year</option>
                                            }
                                    </select>
                                </div>
                            </div>


                            <div class="form-group row">
                                <label class="form-label col-form-label col-lg-4">Price</label>
                                <div class="col-lg-8">
                                    <InputNumber @bind-Value="catalog.Price" class="form-control" id="exampleInputEmail2" placeholder=" Price" />
                                    <span class="text-danger"><ValidationMessage For="@(() => catalog.Price)" /> </span>
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="form-label col-form-label col-lg-4">Ean Number</label>
                                <div class="col-lg-8">
                                    <InputText @bind-Value="catalog.EanNumber" class="form-control" id="exampleInputEmail2" placeholder=" Ean/Upc" />
                                  
                                </div>
                            </div>


                        </div>
                    </div>
                </div>
                <div class="card border-0 mb-3">
                    <div class="card-header h6 mb-0 bg-none p-3 d-flex">
                        <div class="flex-1">
                            <div>  <i class="fa fa-image fa-lg fa-fw text-dark text-opacity-50 me-1"></i><b>Image</b></div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-success">
                            Add Image Thumbnail
                        </div>
                        <div class="form-horizontal form-bordered">
                            <div class="form-group row">
                                <label class="form-label col-form-label col-lg-4">Thumbnail</label>
                                <div class="col-lg-8">

                                    <InputText @bind-Value="catalog.Thumbnail" class="form-control" />

                                    @if (!String.IsNullOrEmpty(catalog.Thumbnail))
                                        {
                                        <img src="@catalog.Thumbnail" style="max-height:200px;max-width:200px" class="mt-15px" />
                                        }

                                </div>
                            </div>


                        </div>
                    </div>

                </div>
                <div class="card border-0 mb-4">
                    <div class="card-header h6 mb-0 bg-none p-3">
                        <i class="fa fa-images fa-lg fa-fw text-dark text-opacity-50 me-1"></i> <b>Media URLs</b>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-10">
                                <InputText @bind-Value="newMediaUrl" class="form-control" placeholder="Enter image URL" />
                            </div>
                            <div class="col-md-2">
                                <button type="button" class="btn btn-success" @onclick="AddMediaUrl">
                                    <i class="fa fa-plus"></i>
                                </button>
                            </div>
                        </div>
                        @if (catalog.CatalogMedias.Count > 0)
                            {
                            @foreach (var media in catalog.CatalogMedias)
                                {
                                <div class="row align-items-center mb-3">

                                    <div class="col-md-8">
                                        <img src="@media.ImageUrl" style="max-width: 100px; height: auto;" class="img-thumbnail" />
                                    </div>
                                    <div class="col-md-4">
                                        <button type="button" @onclick="() => RemoveMediaUrl(media)" class="btn btn-default d-block"><i class="fa fa-trash"></i></button>

                                    </div>
                                </div>
                                }
                            }
                    </div>
                </div>

            </div>
        </div>
    </EditForm>
    @code {

        [Parameter]
        public long Id { get; set; }
        private List<CategoryDto> Categories { get; set; } = new List<CategoryDto>();
        private List<CategoryDto> Level1Categories { get; set; } = new List<CategoryDto>();
        private List<CategoryDto> Level2Categories { get; set; } = new List<CategoryDto>();
        private List<CategoryDto> Level3Categories { get; set; } = new List<CategoryDto>();
        private List<CategoryDto> Level4Categories { get; set; } = new List<CategoryDto>();

        private List<BrandDto> Brands = new List<BrandDto>();
        private long selectedLevel1CategoryId;
        private long selectedLevel2CategoryId;
        private long selectedLevel3CategoryId;

        private Catalog catalog = new Catalog();

        private IEnumerable<ModelYear> ModelYears = new List<ModelYear>();
        private List<GeneralSize> Sizes = new List<GeneralSize>();
        private List<GeneralColor> colors;
        private IEnumerable<Cluster> clusters = new List<Cluster>();
        public string clusterName = "";
        private string newMediaUrl = string.Empty; // New URL input
        private long selectedCategoryId;
        private CategoryDto selectedCategory;



        #region

        protected override async Task OnInitializedAsync()
            {
            ///await LoadCategoryTreeAsync();
            await LoadBrands();
            await LoadModelYears();
            await LoadSizes();
            await LoadColors();
            /*await LoadClusters();*/

            if (Id > 0)
                {
                var response = await CatalogService.GetCatalogByIdAsync(Id);
                if (response.Success)
                    {
                    catalog = response.Data;
                    selectedCategoryId = catalog.Category.Id;
                    //await OnLevel4Changed(catalog.CategoryId);
                    }
                else
                    {
                    Snackbar.Add(response.Message, Severity.Error);
                    }

                }
            }

        private async Task LoadCategoryTreeAsync()
            {
            try
                {
                var response = await CategoryService.GetCategoriesDtoAsync();
                if (response.Success)
                    {
                    Categories = response.Data;
                    Level1Categories = Categories.Where(c => c.Level == 1).ToList();
                    Level2Categories = Categories.Where(c => c.Level == 2).ToList();
                    Level3Categories = Categories.Where(c => c.Level == 3).ToList();
                    Level4Categories = Categories.Where(c => c.Level == 4).ToList();
                    }
                else
                    {
                    Snackbar.Add(response.Message, Severity.Error);
                    }
                }
            catch (Exception ex)
                {
                Snackbar.Add($"An error occurred while loading category tree: {ex.Message}", Severity.Error);
                }
            }

        #endregion

        #region level
        private void OnLevel1Changed(object e)
            {

            try
                {
                var selectedLevel1Id = Convert.ToInt64(e);
                if (selectedLevel1Id > 0)
                    {
                    Level2Categories = Categories.Where(c => c.Level == 2 && c.ParentCategoryId == selectedLevel1Id).ToList() ?? new List<CategoryDto>();
                    Level3Categories.Clear();
                    Level4Categories.Clear();
                    }

                }
            catch (Exception ex)
                {

                }

            }

        private void OnLevel2Changed(object e)
            {
            try
                {
                var selectedLevel2Id = Convert.ToInt64(e);
                if (selectedLevel2Id > 0)
                    {
                    Level3Categories = Categories.Where(c => c.Level == 3 && c.ParentCategoryId == selectedLevel2Id).ToList() ?? new List<CategoryDto>();
                    Level4Categories.Clear();
                    }

                }
            catch (Exception ex)
                {


                }



            }

        private void OnLevel3Changed(object e)
            {
            try
                {
                var selectedLevel3Id = Convert.ToInt64(e);
                if (selectedLevel3Id > 0)
                    {
                    Level4Categories = Categories.Where(c => c.Level == 4 && c.ParentCategoryId == selectedLevel3Id).ToList() ?? new List<CategoryDto>();

                    }

                }

            catch (Exception ex)

                {

                }
            }

        private async Task OnLevel4Changed(object e)
            {
            try
                {
                long categoryId = Convert.ToInt64(e);
                if (categoryId > 0)
                    {
                    // Start from the selected Group Category (Level 4)
                    var currentCategory = Categories.FirstOrDefault(c => c.Id == categoryId);
                    if (currentCategory == null)
                        return;

                    // Level 4 - Group Category
                    selectedLevel3CategoryId = currentCategory.ParentCategoryId ?? 0;

                    if (selectedLevel3CategoryId > 0)
                        {
                        // Level 3 - Sub Sub Category
                        var level3Category = Categories.FirstOrDefault(c => c.Id == selectedLevel3CategoryId);
                        selectedLevel2CategoryId = level3Category?.ParentCategoryId ?? 0;
                        }

                    if (selectedLevel2CategoryId > 0)
                        {
                        // Level 2 - Sub Category
                        var level2Category = Categories.FirstOrDefault(c => c.Id == selectedLevel2CategoryId);
                        selectedLevel1CategoryId = level2Category?.ParentCategoryId ?? 0;
                        }

                    // For Level 1 - Main Category, selectedLevel1CategoryId is already set above
                    // You don't need any further action here if you're just setting the IDs
                    }

                StateHasChanged();
                }
            catch (Exception ex)
                {

                Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
                }
            }




        private void HandleCategorySelected(CategoryDto category)
            {

            Console.WriteLine($"Selected Category: {category.Name} (ID: {category.Id})");
            selectedCategoryId = category.Id;
            selectedCategory = category;
            // You can now use `selectedCategory` as needed.
            }

        private void FnSelectCategory()
            {

            catalog.CategoryId = selectedCategoryId;
            if (catalog.Category==null)
                {
                catalog.Category = new Category();
                }

            catalog.Category.Name = selectedCategory.Name;
            StateHasChanged();

            }

        #endregion


        #region Brand

        private async Task LoadBrands()
            {
            var response = await BrandService.GetBrandsDtoAsync();
            if (response.Success)
                {
                Brands = response.Data;
                }
            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }
            }
        #endregion


        #region ModelYear
        private async Task LoadModelYears()
            {
            try
                {
                var response = await modelYearService.GetModelYearsAsync();
                if (response.Success)
                    {
                    ModelYears = response.Data;
                    }
                else
                    {
                    Snackbar.Add(response.Message, Severity.Error);
                    }
                }
            catch (Exception ex)
                {
                Snackbar.Add("An error occurred while loading model years: " + ex.Message, Severity.Error);
                Console.Error.WriteLine($"Error in LoadModelYears: {ex}");
                }
            }
        #endregion

        #region Sizes
        private async Task LoadSizes()
            {

            try
                {
                var response = await SizeService.GetSizesAsync();
                if (response.Success)
                    {
                    Sizes = response.Data;
                    }
                else
                    {
                    Snackbar.Add(response.Message, Severity.Error);
                    }
                }
            catch (Exception ex)
                {
                Snackbar.Add(ex.Message, Severity.Error);
                }
            }
        #endregion


        #region Colors
        private async Task LoadColors()
            {
            var response = await ColorService.GetColorsAsync();
            if (response.Success)
                {
                colors = response.Data;
                }
            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }
            }
        #endregion

        #region Clsuter
        private async Task LoadClusters()
            {
            try
                {
                var response = await clusterService.GetClustersAsync();
                if (response.Success)
                    {
                    clusters = response.Data;
                    }
                else
                    {
                    Snackbar.Add(response.Message, Severity.Error);
                    }
                }
            catch (Exception ex)
                {
                Snackbar.Add("An error occurred while loading clusters: " + ex.Message, Severity.Error);
                Console.Error.WriteLine($"Error in LoadClusters: {ex}");
                }
            }

        private async Task OnClusterChange(object value)
            {

            string selectedClusterName = value as string;

            var selectedCluster = clusters.FirstOrDefault(c => c.Name == selectedClusterName);
            if (selectedCluster != null)
                {


                var existingCluster = catalog.CatalogClusters.FirstOrDefault(c => c.ClusterId == selectedCluster.Id);
                if (existingCluster != null)
                    {

                    return;
                    }

                var response = await FeatureService.GetFeaturesByClusterId(selectedCluster.Id);
                if (response.Success)
                    {
                    List<Feature> features = response.Data;
                    CatalogCluster catalogClusters = new CatalogCluster();
                    catalogClusters.ClusterId = selectedCluster.Id;
                    catalogClusters.Cluster = selectedCluster;

                    foreach (var f in features)
                        {
                        CatalogClusterFeature catalogclusterFeature = new CatalogClusterFeature();
                        catalogclusterFeature.Feature = f;
                        catalogclusterFeature.FeatureId = f.Id;
                        catalogClusters.CatalogClusterFeatures.Add(catalogclusterFeature);

                        }

                    catalog.CatalogClusters.Add(catalogClusters);


                    }
                else
                    {
                    Snackbar.Add(response.Message, Severity.Error);
                    }
                }


            }



        #endregion


        private async Task HandleValidSubmit(EditContext editContext)
            {


            try
                {
                if (catalog.CategoryId == 0 || catalog.CategoryId == null)
                    {
                    Snackbar.Add($"Please Select Category", Severity.Info);
                    return;
                    }

                if (Id > 0)
                    {
                    var response = await CatalogService.UpdateCatalogAsync(catalog);
                    if (response.Success)
                        {
                        Snackbar.Add(response.Message, Severity.Success);
                        await Task.Delay(1000);

                        }
                    else
                        {
                        Snackbar.Add(response.Message, Severity.Error);
                        }
                    }
                else
                    {
                    var response = await CatalogService.AddCatalogAsync(catalog);
                    if (response.Success)
                        {
                        Snackbar.Add(response.Message, Severity.Success);

                        }
                    else
                        {
                        Snackbar.Add(response.Message, Severity.Error);
                        }
                    }
                }
            catch (Exception ex)
                {
                Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
                }
            }

        private void HandleKeyDown(KeyboardEventArgs e)
            {
            if (e.Key == "Enter")
                {
                return;
                }

            }


        #region Remove Methods

        private void RemoveCluster(CatalogCluster clusterToRemove)
            {
            catalog.CatalogClusters.Remove(clusterToRemove);
            }

        private void RemoveFeature(CatalogCluster cluster, CatalogClusterFeature featureToRemove)
            {
            cluster.CatalogClusterFeatures.Remove(featureToRemove);
            }
        #endregion


        #region MediaURl

        private void AddMediaUrl()
            {
            if (!string.IsNullOrWhiteSpace(newMediaUrl))
                {
                catalog.CatalogMedias.Add(new CatalogMedia { ImageUrl = newMediaUrl });
                newMediaUrl = string.Empty;
                }
            }

        private void RemoveMediaUrl(CatalogMedia media)
            {
            catalog.CatalogMedias.Remove(media);
            }
        #endregion



    }





