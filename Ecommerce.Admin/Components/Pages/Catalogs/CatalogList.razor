
@page "/CatalogList"
@using Ecommerce.Shared.Entities.Catalogs
@using Ecommerce.Shared.Services.Catalogs
@using Pages.Shared
@inject ICatalogService CatalogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="d-flex align-items-center mb-3">
    <div>
        <ol class="breadcrumb mb-2">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item"><a href="/CatalogList">Catalog</a></li>
            <li class="breadcrumb-item active"><i class="fa fa-arrow-back"></i> Catalogs</li>
        </ol>
    </div>
</div>

<div class="panel panel-inverse">
    <div class="panel-heading">
        <h4 class="panel-title">Catalog - List</h4>
        <div class="panel-heading-btn">
            <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
        </div>
    </div>
    <div class="panel-body">
        <div class="row fileupload-buttonbar">
            <div class="col-xl-7">
                <button type="button" class="btn btn-primary start me-1 mb-3" @onclick="NavigateToAddEditCatalog">
                    <i class="fa fa-fw fa-add"></i>
                    <span>Add Catalog</span>
                </button>
                <span class="fileupload-process"></span>
            </div>
            <div class="col-xl-5 fileupload-progress fade d-none d-xl-block">
                <div class="progress progress-striped active">
                    <div class="progress-bar progress-bar-success" style="width:0%;"></div>
                </div>
                <div class="progress-extended">&nbsp;</div>
            </div>
        </div>

        <MudDataGrid T="Catalog" Items="@catalogs" ColumnResizeMode="@(_resizeColumn ? ResizeMode.Column : ResizeMode.Container)" RowsPerPage="5" Striped="true" Bordered="true">
            <ColGroup>
                <col style="width: 10%;" />
                <col style="width: 40%;" />
                <col style="width: 15%;" />
                <col style="width: 15%;" />
                <col style="width: 20%;" />
            </ColGroup>
            <Columns>
                <!-- Thumbnail Column -->
                <TemplateColumn Title="Thumbnail" Style="width:10%">
                    <CellTemplate>
                        <img src="@context.Item.Thumbnail" alt="Thumbnail" style="max-height: 50px; max-width: 50px;" />
                    </CellTemplate>
                </TemplateColumn>

                <!-- Name Column -->
                <PropertyColumn Property="x => x.Name" Title="Name" Style="width:40%" />

                <!-- Price Column -->
                <PropertyColumn Property="x => x.Price" Title="Price" Style="width:15%" />

                <!-- Code Column (if you have a field like Code) -->
                <PropertyColumn Property="x => x.Code" Title="Code" Style="width:15%" />

                <!-- Action Column -->
                <TemplateColumn  Style="width:20%">
                    <HeaderTemplate>
                        <div>Actions</div>
                    </HeaderTemplate>
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="text-warning" OnClick="() => EditCatalog(context.Item)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="text-danger" OnClick="() => DeleteCatalog(context.Item)" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>

            <PagerContent>
                <MudDataGridPager T="Catalog" PageSizeOptions=@(new int[] {5, 10, 20}) />
            </PagerContent>
        </MudDataGrid>
    </div>
</div>

@code {
    private bool _resizeColumn;
    private IEnumerable<Catalog> catalogs = new List<Catalog>();
    private string _searchString;
    private List<string> _events = new();

    [Inject]
    public IDialogService DialogService { get; set; }

    private Func<Catalog, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadCatalogs();
    }

    private async Task LoadCatalogs()
    {
        try
        {
            var response = await CatalogService.GetCatalogsAsync();
            if (response.Success)
            {
                catalogs = response.Data;
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while loading catalogs: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in LoadCatalogs: {ex}");
        }
    }

    private void EditCatalog(Catalog catalog)
    {
        try
        {
            NavigationManager.NavigateTo($"/AddEditCatalog/{catalog.Id}");
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while navigating to edit the catalog: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in EditCatalog: {ex}");
        }
    }

    private async Task DeleteCatalog(Catalog catalog)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Do you want to confirm?");
            parameters.Add("ButtonText", "Yes");
            var dialogresult = DialogService.Show<DeleteDialog>("Confirm", parameters);
            var result = await dialogresult.Result;
            if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out bool resultbool))
                await Delete(catalog);
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while attempting to delete the catalog: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in DeleteCatalog: {ex}");
        }
    }

    private async Task Delete(Catalog catalog)
    {
        try
        {
            var response = await CatalogService.DeleteCatalogAsync(catalog.Id);
            if (response.Success)
            {
                await LoadCatalogs();
                Snackbar.Add(response.Message, Severity.Success);
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while deleting the catalog: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in Delete: {ex}");
        }
    }

    private void NavigateToAddEditCatalog()
    {
        try
        {
            NavigationManager.NavigateTo("/AddEditCatalog");
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while navigating to add or edit a catalog: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in NavigateToAddEditCatalog: {ex}");
        }
    }
}
