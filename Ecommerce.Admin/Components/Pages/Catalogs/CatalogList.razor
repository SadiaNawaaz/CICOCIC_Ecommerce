
@page "/CatalogList"
@using Ecommerce.Shared.Entities.Catalogs
@using Ecommerce.Shared.Services.Catalogs
@using Pages.Shared
@inject ICatalogService CatalogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

  <style>

      .mud-table-head {
          background-color: #00acac;
          color:white;
      }
  </style>

<div class="d-flex align-items-center mb-3">
    <div>
        <ol class="breadcrumb mb-2">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item"><a href="/CatalogList">Catalog</a></li>
            <li class="breadcrumb-item active"><i class="fa fa-arrow-back"></i> Catalogs</li>
        </ol>
    </div>
    <div class="ms-auto">
        <button @onclick="NavigateToAddEditCatalog" class="btn btn-success btn-rounded px-4 rounded-pill"><i class="fa fa-plus fa-lg me-2 ms-n2 text-success-900"></i> Add Catalog</button>
    </div>
</div>

<div class="panel panel-inverse">
    <div class="panel-heading">
        <h4 class="panel-title">Catalog - List</h4>
        <div class="panel-heading-btn">
            <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
        </div>
    </div>
    <div class="panel-body">
        <div class="row fileupload-buttonbar">
            <div class="col-xl-9">

            </div>
        </div>


        <div class="input-group mb-3">
            <button class="btn btn-white" type="button"  aria-haspopup="true" aria-expanded="false">Filter Catalog <b class="caret"></b></button>
            <div class="flex-fill position-relative">
                <div class="input-group">
                    <div class="input-group-text position-absolute top-0 bottom-0 bg-none border-0 pe-0" style="z-index: 1;">
                        <i class="fa fa-search opacity-5"></i>
                    </div>
                    <input type="text" class="form-control ps-35px bg-light" placeholder="Search ..."  @bind="_searchString" @bind:event="oninput" @onkeyup="OnSearchChanged"/>
                </div>
            </div>
        </div>


        <MudDataGrid T="CatalogDto" Items="@filteredCatalogs" ColumnResizeMode="@(_resizeColumn ? ResizeMode.Column : ResizeMode.Container)" RowsPerPage="10" Striped="true" Bordered="true">
            <ColGroup>
                <col style="width: 10%;" />
                <col style="width: 40%;" />
                <col style="width: 15%;" />
                <col style="width: 15%;" />
                <col style="width: 20%;" />
            </ColGroup>
            <Columns>
                <!-- Thumbnail Column -->

                <TemplateColumn Title="Thumbnail" Style="width:10%">
                    <CellTemplate>
                        <img src="@context.Item.Thumbnail" alt="NoImage.png" style="width:65px; height:30px; object-fit: cover;" onerror="this.onerror=null; this.src='NoImage.png';" />
                    </CellTemplate>
                </TemplateColumn>

                <!-- Name Column -->
                <PropertyColumn Property="x => x.Name" Title="Title" Style="width:40%" />

                <!-- Price Column -->
                <PropertyColumn Property="x => x.Price" Title="Price" Style="width:15%" />

                <!-- Code Column (if you have a field like Code) -->
                <PropertyColumn Property="x => x.Code" Title="Code" Style="width:15%" />

                <!-- Action Column -->
                <TemplateColumn Style="width:20%">
                    <HeaderTemplate>
                        <div>Manage Records</div>
                    </HeaderTemplate>
                    <CellTemplate>
                        <MudStack Row>
                            <!-- Edit Button with Tooltip -->
                            <button type="button" class="btn btn-warning btn-sm" data-bs-toggle="tooltip" title="Edit" @onclick="@(e => EditCatalog(context.Item))">
                                <i class="fas fa-edit"></i>
                            </button>

                            <!-- Delete Button with Tooltip -->
                            <button type="button" class="btn btn-danger btn-sm" data-bs-toggle="tooltip" title="Delete"   @onclick="@(e => DeleteCatalog(context.Item))">
                                <i class="fas fa-trash"></i>
                            </button>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>

            <PagerContent>
                <MudDataGridPager T="CatalogDto" PageSizeOptions=@(new int[] {5, 10, 20}) />
            </PagerContent>
        </MudDataGrid>










    </div>
</div>

@code {
    private bool _resizeColumn;
    private IEnumerable<CatalogDto> catalogs = new List<CatalogDto>();
    private IEnumerable<CatalogDto> filteredCatalogs = new List<CatalogDto>();
    private string _searchString = string.Empty;

    private List<string> _events = new();

    [Inject]
    public IDialogService DialogService { get; set; }


    protected override async Task OnInitializedAsync()
        {
        await LoadCatalogs();
        }

    private async Task LoadCatalogs()
        {
        try
            {
            var response = await CatalogService.GetCatalogsWithBrandAsync();
            if (response.Success)
                {
                catalogs = response.Data;
                FilterCatalogs();
                }
            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }
            }
        catch (Exception ex)
            {
            Snackbar.Add("An error occurred while loading catalogs: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in LoadCatalogs: {ex}");
            }
        }

    private void EditCatalog(CatalogDto catalog)
        {
        try
            {
            NavigationManager.NavigateTo($"/AddEditCatalog/{catalog.Id}");
            }
        catch (Exception ex)
            {
            Snackbar.Add("An error occurred while navigating to edit the catalog: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in EditCatalog: {ex}");
            }
        }

    private async Task DeleteCatalog(CatalogDto catalog)
        {
        try
            {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Do you want to confirm?");
            parameters.Add("ButtonText", "Yes");
            var dialogresult = DialogService.Show<DeleteDialog>("Confirm", parameters);
            var result = await dialogresult.Result;
            if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out bool resultbool))
                await Delete(catalog);
            }
        catch (Exception ex)
            {
            Snackbar.Add("An error occurred while attempting to delete the catalog: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in DeleteCatalog: {ex}");
            }
        }

    private async Task Delete(CatalogDto catalog)
        {
        try
            {
            var response = await CatalogService.DeleteCatalogAsync(catalog.Id);
            if (response.Success)
                {
                await LoadCatalogs();
                Snackbar.Add(response.Message, Severity.Success);
                }
            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }
            }
        catch (Exception ex)
            {
            Snackbar.Add("An error occurred while deleting the catalog: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in Delete: {ex}");
            }
        }

    private void NavigateToAddEditCatalog()
        {
        try
            {
            NavigationManager.NavigateTo("/AddEditCatalog");
            }
        catch (Exception ex)
            {
            Snackbar.Add("An error occurred while navigating to add or edit a catalog: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in NavigateToAddEditCatalog: {ex}");
            }
        }


    private void OnSearchChanged()
        {
        FilterCatalogs();
        }

    private void FilterCatalogs()
        {
        if (string.IsNullOrWhiteSpace(_searchString))
            {
            filteredCatalogs = catalogs;
            }
        else
            {
            filteredCatalogs = catalogs.Where(c =>
                c.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                c.Code?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true ||
                c.Price.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase)
            );
            }
        }
}
