@page "/AddEditProductVariants"
@inject ISnackbar Snackbar
@rendermode InteractiveServer
@inject ICategoryService CategoryService
@inject IProductVariantService IProductVariantService
@using Ecommerce.Shared.Services.ProductVariants;
@using Radzen
@using Radzen.Blazor
@inject IProductService IProductService
@inject ITemplateService TemplateService
@using Ecommerce.Shared.Services.Brands;
@inject IBrandService BrandService
@inject IModelYearService modelYearService
@using Ecommerce.Shared.Services.Sizes;
@inject ISizeService SizeService
@inject IColorService ColorService
@using Ecommerce.Shared.Services.Colors;
@using Ecommerce.Shared.Entities.Colors;
@using Ecommerce.Shared.Entities.ProductVariants
@inject NavigationManager NavigationManager
@inject ImageResizeService ImageResizeService
@inherits AuthenticatedComponent
@using Ecommerce.Shared.Enums;
@using Ecommerce.Shared.Services.Catalogs;
@inject ICatalogService CatalogService
@using Ecommerce.Shared.Entities.Catalogs;
@inject IConfiguration Configuration
@inject IJSRuntime JS




<EditForm Model="@productVariant" OnValidSubmit="HandleValidSubmitVariant" FormName="Variants">
    <DataAnnotationsValidator />

    <div class="d-flex align-items-center mb-3">
        <div>
            <ol class="breadcrumb mb-2">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/ProductList">Product</a></li>
                <li class="breadcrumb-item active"><i class="fa fa-arrow-back"></i>  Variants</li>
            </ol>
            <h1 class="page-header mb-0"> Variants</h1>
        </div>

        <div class="ms-auto">
            <button type="submit" @onkeypress="KeyHandler" @onkeypress:preventDefault class="btn btn-success w-100px me-5px mt-20px">Save</button>
        </div>
    </div>


    <!-- The Modal -->
    <div class="row">
        <div class="col-xl-8">
            <div class="card border-0 mb-4">
                <div class="card-header h6 mb-0 bg-none p-3">
                    <i class="fa fa-dolly fa-lg fa-fw text-dark text-opacity-50 me-1"></i> <b>Product Information</b>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-lg-9">
                            <label class="form-label">Title</label>
                            <InputText id="name" class="form-control" @bind-Value="productVariant.Name" />

                            <span class="text-danger"> <ValidationMessage For="@(() => productVariant.Name)" /></span>

                        </div>




                    </div>
                    <div class="col-lg-12">
                        <label class="form-label">Description</label>
                        <div class="form-control p-0 overflow-hidden">
                            <InputTextArea class="textarea form-control" id="wysihtml5" placeholder="Enter text ..." rows="12" @bind-Value="@productVariant.Description"></InputTextArea>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card border-0 mb-4">
                <div class="card-header h6 mb-0 bg-none p-3 d-flex justify-content-between align-items-center">
                    <div>
                        <i class="fa fa-file-image fa-lg fa-fw text-dark text-opacity-50 me-1"></i><b>Media</b>
                    </div>
                    <div>
                        <label>
                            <input type="checkbox" @onchange="OnCheckboxChanged" />
                            Clone Product images
                        </label>
                    </div>
                </div>


                <div class="card-body">
                    <div id="dropzone">
                        <div>
                            <div class="dz-message needsclick">
                                <b>Click</b> to upload.<br />

                                <InputFile id="productImage" OnChange="@HandleSelected" class="form-control" multiple />

                                @if (selectedFiles != null && selectedFiles.Count() > 0)
                                    {
                                    <div style="display: flex; flex-wrap: wrap; margin-top: 10px;">
                                        @foreach (var file in selectedFiles.OrderBy(f => f.Order).Where(a => !a.IsDeleted))
                                            {
                                            <div style="position: relative; margin: 10px; cursor: grab;" draggable="true"
                                                 @ondragstart="(e) => HandleDragStart(e, file)"
                                                 ondragover="event.preventDefault();"
                                                 @ondrop="() => HandleDrop(file)">
                                                <img src="@file.ImageUrl" alt="Image Preview" style="height: 150px; width: 150px;" />
                                                <button type="button" @onclick="() => RemoveImage(file)" class="btn btn-danger btn-sm" style="position: absolute; top: 10px; right: 10px;">X</button>
                                            </div>
                                            }
                                    </div>
                                    }
                            </div>
                        </div>
                    </div>
                </div>


                @*<div class="card-body">
                        <div id="dropzone">
                            <div>
                                <div class="dz-message needsclick">
                                    <b>click</b> to upload.<br />

                                    <InputFile id="productImage" OnChange="@HandleSelected" class="form-control" multiple />

                                    @if (selectedFiles != null && selectedFiles.Count() > 0)
                                    {
                                        <div>

                                            @foreach (var file in selectedFiles.Where(a => a.IsDeleted == false))
                                            {
                                                <div style="display:inline-block; margin: 10px; position: relative;">
                                                    <img src="@file.ImageUrl" alt="Image Preview" style="height:150px;width:150px" />
                                                    <button type="button" @onclick="() => RemoveImage(file)" class="btn btn-danger btn-sm" style="position: absolute; top: 10px; right: 10px;">X</button>
                                                </div>
                                            }

                                        </div>
                                    }

                                </div>
                            </div>
                        </div>
                    </div>*@
            </div>



            <div class="card border-0 mb-4">
                <div class="card-header h6 mb-0 bg-none p-3 d-flex justify-content-between align-items-center">
                    <div>
                        <i class="fa fa-file-image fa-lg fa-fw text-dark text-opacity-50 me-1"></i> <b>Media URLS</b>
                    </div>

                </div>
                <div class="card-body">
                    @if (productVariant.ProductVariantMedias != null && productVariant.ProductVariantMedias.Count > 0)
                        {
                        @foreach (var media in productVariant.ProductVariantMedias)
                            {
                            <div class="row align-items-center mb-3">

                                <div class="col-md-4">
                                    <img src="@media.ImageUrl" style="max-width: 100px; height: auto;" class="img-thumbnail" />
                                </div>
                                <div class="col-md-4">


                                    <button type="button" @onclick="() => RemoveMediaUrl(media)" class="btn btn-outline-danger btn-sm"><i class="fa fa-trash"></i></button>


                                </div>
                            </div>
                            }
                        }

                </div>
            </div>

            <div class="card border-0 mb-4">
                <div class="card-header h6 mb-0 bg-none p-3">
                    <i class="fa fa-sitemap fa-lg fa-fw text-dark text-opacity-50 me-1"></i> <b>Product Specifications</b>
                </div>
                <div class="card-body">

                    <div>
                        @if (Product != null && Product.ProductClusters != null && Product.ProductClusters.Count > 0)
                            {

                            foreach (var clus in Product.ProductClusters)
                                {


                                <div class="row mb-3 gx-3 alert alert-success align-items-center">
                                    <div class="col-10">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <ul class="list-unstyled mb-0">
                                                    <li><strong>@clus.Cluster.Name</strong></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-2 text-end">

                                    </div>
                                </div>
                                foreach (var f in clus.ProductClusterFeatures)
                                    {
                                    <div class="row mb-3 gx-3">
                                        <div class="col-2">
                                            <ul id="tag-size" class="primary">
                                                <li>@f.Feature.Name</li>

                                            </ul>
                                        </div>
                                        <div class="col-4"><input type="text" class="form-control" @bind-value="@f.Value" readonly /></div>

                                    </div>
                                    }

                                }

                            }


                    </div>


                </div>



            </div>


            @*<div class="card border-0 mb-4">
                    <div class="card-header h6 mb-0 bg-none p-3">
                        <i class="fa fa-plug-circle-check fa-lg fa-fw text-dark text-opacity-50 me-1"></i> Object Section
                    </div>
                    <div class="card-body">

                        <div class="row">

                            <div class="col-6">
                                <label class="form-label">Type</label>

                                <select id="variantType" @bind="productVariant.variantType" class="form-control">
                                    @foreach (var variant in Enum.GetValues(typeof(VariantType)).Cast<VariantType>())
                                    {
                                        <option value="@variant">@variant</option>
                                    }
                                </select>
                            </div>


                            <div class="col-6">
                                <label class="form-label">Value</label>
                                <InputText id="name" class="form-control" @bind-Value="productVariant.TypeValue" />
                            </div>
                            <div class="col-12">
                                <label class="form-label">Note</label>
                                <div class="form-control p-0 overflow-hidden">
                                    <InputTextArea class="textarea form-control" id="wysihtml5" placeholder="Enter text ..." rows="2" @bind-Value="@productVariant.Note"></InputTextArea>
                                </div>
                            </div>

                        </div>


                    </div>



                </div>*@


        </div>
        <div class="col-xl-4">
            <div class="card border-0 mb-4">
                <div class="card-header h6 mb-0 bg-none p-3 d-flex">
                    <div class="flex-1">
                        <div>  <i class="fa fa-arrow-right-from-file fa-lg fa-fw text-dark text-opacity-50 me-1"></i><b>Publish</b></div>
                    </div>
                    <div><a href="#" class="text-decoration-none text-gray-500">Manage</a></div>
                </div>
                <div class="card-body fw-bold">
                    <div class="d-flex">
                        <div class="flex-1 d-flex">
                            <div class="me-2">
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="@productVariant.Publish" class="form-check-input" type="checkbox" id="widget_todolist_1" />
                                </div>
                            </div>
                            <div>Publish to Site</div>
                        </div>
                    </div>
                    <br />
                    <div class="d-flex">
                        @if (productVariant != null && productVariant.Id > 0)
                            {
                            <div class="flex-1 d-flex">

                                <a href="@(webAppUrl + "Product?Id=" + productVariant.Id)" class="text-decoration-none" target="_blank">
                                    <i class="fa fa-lg fa-fw fa-eye"></i>
                                </a>

                                <p> &nbsp;&nbsp;&nbsp; Save before Preview!</p>
                            </div>
                            <hr />
                            }

                    </div>



                </div>
            </div>
            <div class="card border-0 mb-4">
                <div class="card-header h6 mb-0 bg-none p-3 d-flex">
                    <div class="flex-1">
                        <div>  <i class="fa fa-seedling fa-lg fa-fw text-dark text-opacity-50 me-1"></i><b>Product Level</b></div>
                    </div>
                </div>
                <div class="card-body fw-bold">

                    <div class="mb-0 mt-10px">
                        <label class="form-label">
                            Product
                            <a href="/MainProduct" class="text-success me-1 mb-1">  Add New</a>
                        </label>
                        <div class="input-group">
                            <input type="text" value="@Product.Name" class="form-control" readonly />
                        </div>
                    </div>
                </div>
            </div>
            <div class="card border-0 mb-4">
                <div class="card-header h6 mb-0 bg-none p-3 d-flex">
                    <div class="flex-1">
                        <div>  <i class="fa fa-navicon fa-lg fa-fw text-dark text-opacity-50 me-1"></i><b>Brand</b></div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="d-flex align-items-center position-relative fw-bold mb-2">
                        <input type="text" value="@((Product?.Brand?.Name) ?? "No Brand Available")" class="form-control" readonly />

                    </div>

                </div>
            </div>
            <div class="card border-0 mb-4">
                <div class="card-header h6 mb-0 bg-none p-3 d-flex">
                    <div class="flex-1">
                        <div>  <i class="fa fa-list-check fa-lg fa-fw text-dark text-opacity-50 me-1"></i><b>Variants</b></div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="alert alert-success">
                        Add variants if this product comes in multiple versions, like different sizes or colors.
                    </div>
                    <form class="form-horizontal form-bordered">
                        <div class="form-group row">
                            <label class="form-label col-form-label col-lg-4">Size</label>
                            <div class="col-lg-8">

                                <select class="form-select" @bind="@productVariant.GeneralSizeId">
                                    <option value="">-- Select Size --</option>
                                    @foreach (var size in Sizes)
                                        {
                                        <option value="@size.Id">@size.Name</option>
                                        }
                                </select>

                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="form-label col-form-label col-lg-4">
                                Color  &nbsp;&nbsp;
                                <div>

                                    @if (productVariant.GeneralColorId != null)
                                        {
                                        var selectedColor = colors.FirstOrDefault(c => c.Id == productVariant.GeneralColorId);
                                        if (selectedColor != null)
                                            {
                                            <span class="badge" style="background-color:@selectedColor.HexCode; color:@selectedColor.HexCode;border-color:black"> . .</span>
                                            }
                                        }


                                </div>
                            </label>
                            <div class="col-lg-8">
                                <select class="form-select" @bind="@productVariant.GeneralColorId">
                                    <option value="">-- Select Color --</option>
                                    @if (colors != null && colors.Count > 0)
                                        {
                                        @foreach (var col in colors)
                                            {


                                            <option value="@col.Id">@col.Name</option>
                                            }
                                        }

                                </select>



                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="form-label col-form-label col-lg-4">SKU</label>
                            <div class="col-lg-8">
                                <InputText @bind-Value="@productVariant.Sku" class="form-control" id="masked-input-tid" placeholder="#sku00001" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="form-label col-form-label col-lg-4">Price</label>
                            <div class="col-lg-8">
                                <InputNumber @bind-Value="@productVariant.Price" class="form-control" id="masked-input-pkey" placeholder="300" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="form-label col-form-label col-lg-4">Build Year</label>
                            <div class="col-lg-8">

                                <select class="form-select" @bind="@productVariant.ModelYearId">
                                    <option value="">-- Select Model Year --</option>
                                    @foreach (var modelYear in ModelYears)
                                        {
                                        <option value="@modelYear.Id">@modelYear.Year</option>
                                        }
                                </select>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="form-label col-form-label col-lg-4">SSN</label>
                            <div class="col-lg-8">
                                <InputText @bind-Value="@productVariant.SSN" class="form-control" id="masked-input-pno" placeholder="AAA-9999-A" />
                            </div>
                        </div>
                    </form>
                </div>
            </div>



            <div class="card border-0 mb-3">
                <div class="card-header h6 mb-0 bg-none p-3 d-flex">
                    <div class="flex-1">
                        <div>  <i class="fa fa-image fa-lg fa-fw text-dark text-opacity-50 me-1"></i><b>Image</b></div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="alert alert-success">
                        Add Image Thumbnail
                    </div>
                    <div class="form-horizontal form-bordered">
                        <div class="form-group row">
                            <label class="form-label col-form-label col-lg-4">Thumbnail</label>
                            <div class="col-lg-8">

                                <InputText @bind-Value="productVariant.Thumbnail" class="form-control" />

                                @if (!String.IsNullOrEmpty(productVariant.Thumbnail))
                                    {
                                    <img src="@productVariant.Thumbnail" style="max-height:200px;max-width:200px" class="mt-15px" />
                                    }

                            </div>
                        </div>


                    </div>
                </div>
            </div>
        </div>


    </div>
</EditForm>
@code {

    #region Veriable
    [Parameter]
    [SupplyParameterFromQuery(Name = "Id")]
    public long Id { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "ProductId")]
    public long ProductId { get; set; }
    private ProductVariant productVariant = new ProductVariant();
    private List<CategoryDto> Categories { get; set; } = new List<CategoryDto>();
    private List<CategoryDto> Level1Categories { get; set; } = new List<CategoryDto>();
    private List<CategoryDto> Level2Categories { get; set; } = new List<CategoryDto>();
    private List<CategoryDto> Level3Categories { get; set; } = new List<CategoryDto>();
    private List<CategoryDto> Level4Categories { get; set; } = new List<CategoryDto>();
    private long selectedLevel1CategoryId;
    private long selectedLevel2CategoryId;
    private long selectedLevel3CategoryId;
    private Product Product = new Product();
    private List<Brand> Brands = new List<Brand>();
    private IEnumerable<ModelYear> ModelYears = new List<ModelYear>();
    private List<GeneralSize> Sizes = new List<GeneralSize>();

    private Catalog catalog = new Catalog();
    private List<GeneralColor> colors;
    string webAppUrl = "";


    #endregion
    protected override async Task OnInitializedAsync()
        {
        await base.OnInitializedAsync();

        webAppUrl = Configuration["WebAppUrl"];
        await GetProduct();
        await LoadCategoryTreeAsync();
        await LoadModelYears();
        await LoadBrands();
        await LoadSizes();
        await LoadColors();



        if (Id > 0)
            {
            await LoadVariantForEdit();

            }

        //await LoadTemplate(Product.TemplateMasterId);


        }

    private async Task LoadCategoryTreeAsync()
        {
        try
            {
            var response = await CategoryService.GetCategoriesDtoAsync();
            if (response.Success)
                {
                Categories = response.Data;
                Level1Categories = Categories.Where(c => c.Level == 1).ToList();
                }
            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }
            }
        catch (Exception ex)
            {
            Snackbar.Add($"An error occurred while loading category tree: {ex.Message}", Severity.Error);
            }
        }
    #region level
    private void OnLevel1Changed(object e)
        {

        try
            {
            var selectedLevel1Id = Convert.ToInt64(e);
            if (selectedLevel1Id > 0)
                {
                Level2Categories = Categories.Where(c => c.Level == 2 && c.ParentCategoryId == selectedLevel1Id).ToList() ?? new List<CategoryDto>();
                Level3Categories.Clear();
                Level4Categories.Clear();
                }

            }
        catch (Exception ex)
            {

            }

        }

    private void OnLevel2Changed(object e)
        {
        try
            {
            var selectedLevel2Id = Convert.ToInt64(e);
            if (selectedLevel2Id > 0)
                {
                Level3Categories = Categories.Where(c => c.Level == 3 && c.ParentCategoryId == selectedLevel2Id).ToList() ?? new List<CategoryDto>();
                Level4Categories.Clear();
                }

            }
        catch (Exception ex)
            {


            }



        }

    private void OnLevel3Changed(object e)
        {
        try
            {
            var selectedLevel3Id = Convert.ToInt64(e);
            if (selectedLevel3Id > 0)
                {
                Level4Categories = Categories.Where(c => c.Level == 4 && c.ParentCategoryId == selectedLevel3Id).ToList() ?? new List<CategoryDto>();

                }

            }

        catch (Exception ex)

            {

            }
        }

    private async Task GetProduct()
        {
        try
            {


            var response = await IProductService.GetProductByIdAsync(ProductId);

            if (response.Success)
                {

                Product = response.Data;
                if (Id == 0)
                    {
                    productVariant.Name = Product.Name;
                    productVariant.ProductId = Product.Id;
                    productVariant.Price = Product.Price;
                    if (Product.CatalogId != null && Product.CatalogId > 0)
                        {
                        var Catresponse = await CatalogService.GetCatalogByIdAsync(Product.CatalogId.Value);
                        if (Catresponse.Success)
                            {
                            catalog = Catresponse.Data;

                            productVariant.GeneralColorId = catalog.GeneralColorId;
                            productVariant.GeneralSizeId = catalog.GeneralSizeId;
                            productVariant.ModelYearId = catalog.ModelYearId;

                            if (Product.Thumbnail != null && Product.Thumbnail != "")
                                {
                                productVariant.Thumbnail = Product.Thumbnail;
                                }
                            else
                                {
                                productVariant.Thumbnail = catalog.Thumbnail;
                                }


                            }
                        else
                            {
                            Snackbar.Add(response.Message, Severity.Error);
                            }

                        }
                    }

                }

            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }



            }

        catch (Exception ex)
            {
            Snackbar.Add(ex.Message, Severity.Error);

            }


        }


    #endregion



    #region Brand

    private async Task LoadBrands()
        {
        var response = await BrandService.GetBrandsAsync();
        if (response.Success)
            {
            Brands = response.Data;
            }
        else
            {
            Snackbar.Add(response.Message, Severity.Error);
            }
        }
    #endregion

    #region ModelYear
    private async Task LoadModelYears()
        {
        try
            {
            var response = await modelYearService.GetModelYearsAsync();
            if (response.Success)
                {
                ModelYears = response.Data;
                }
            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }
            }
        catch (Exception ex)
            {
            Snackbar.Add("An error occurred while loading model years: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in LoadModelYears: {ex}");
            }
        }
    #endregion

    #region Sizes
    private async Task LoadSizes()
        {

        try
            {
            var response = await SizeService.GetSizesAsync();
            if (response.Success)
                {
                Sizes = response.Data;
                }
            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }
            }
        catch (Exception ex)
            {
            Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    #endregion


    #region Colors
    private async Task LoadColors()
        {
        var response = await ColorService.GetColorsAsync();
        if (response.Success)
            {
            colors = response.Data;
            }
        else
            {
            Snackbar.Add(response.Message, Severity.Error);
            }
        }
    #endregion

    #region Save
    private async Task HandleValidSubmitVariant()
        {
        try
            {
            ServiceResponse<ProductVariant> response;
            productVariant.productVariantImages = productVariant.productVariantImages.Where(a => a.IsDeleted == false).ToList();

            if (Id != 0)
                {
                productVariant.LastModifiedBy = UserId;
                productVariant.LastModifiedDate = DateTime.Now;

                response = await IProductVariantService.UpdateProductVariantAsync(productVariant);
                if (response.Success)
                    {
                    Snackbar.Add(response.Message, Severity.Success);

                    }
                else
                    {
                    Snackbar.Add(response.Message, Severity.Error);
                    Console.Error.WriteLine($"Error : {response.InnerException}");

                    await JS.InvokeVoidAsync("console.log", response.InnerException);
                    }
                }
            else
                {

                productVariant.ProductId = ProductId;
                productVariant.CreatedBy = UserId;
                productVariant.CreatedDate = DateTime.Now;
                response = await IProductVariantService.AddProductVariantAsync(productVariant);
                if (response.Success)
                    {
                    Snackbar.Add(response.Message, Severity.Success);

                    }
                else
                    {
                    Snackbar.Add(response.Message, Severity.Error);
                    await JS.InvokeVoidAsync("console.log", response.InnerException);
                    }
                }

            if (response.Success)


                {
                await SaveImagesToFileSystem(productVariant.Id);
                }

            }
        catch (Exception ex)
            {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            }
        }
    private async Task SaveImagesToFileSystem(long productVariantId)
        {
        var productVariantImagesPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "ProductVariants", productVariantId.ToString());

        if (!Directory.Exists(productVariantImagesPath))
            {
            Directory.CreateDirectory(productVariantImagesPath);
            }

        foreach (var image in selectedFiles)
            {

            var filePath = Path.Combine(productVariantImagesPath, image.ImageName);
            if (image.IsDeleted == true)
                {
                if (image.IsDeleted)
                    {
                    if (File.Exists(filePath))
                        {
                        File.Delete(filePath);
                        }
                    }
                }

            else if (image.IsCloned == true && !File.Exists(filePath))
                {
                // Copy the file from the original location if it's cloned
                var sourceFilePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Products", Product.Id.ToString(), image.ImageName);
                if (File.Exists(sourceFilePath))
                    {
                    File.Copy(sourceFilePath, filePath);
                    }
                image.ImageUrl = $"/ProductVariants/{productVariantId}/{image.ImageName}";
                }



            else if (image.IsDeleted == false && image.ImageByte == null)
                {

                }
            else
                {
                await File.WriteAllBytesAsync(filePath, image.ImageByte);
                image.ImageUrl = $"/ProductVariants/{productVariantId}/{image.ImageName}";
                }



            }


        }
    #endregion


    #region Edit
    private async Task LoadVariantForEdit()
        {
        try
            {
            var response = await IProductVariantService.GetProductVariantByIdAsync(Id);
            if (response.Success)
                {
                productVariant = response.Data;
                selectedFiles = productVariant.productVariantImages;
                if (selectedFiles != null && selectedFiles.Count() > 0)
                    {
                    selectedFiles.ToList().ForEach(image =>
                    {
                        image.ImageUrl = $"/ProductVariants/{productVariant.Id}/{image.ImageName}";
                    });
                    }

                }
            else
                {
                Snackbar.Add(response.Message, Severity.Error);
                }
            }
        catch (Exception ex)
            {
            Snackbar.Add(ex.Message, Severity.Error);
            }
        }

    #endregion


    #region Images

    private List<ProductVariantImages> selectedFiles = new List<ProductVariantImages>();
    private List<string> selectedImagePreviews = new List<string>();
    private ProductVariantImages? draggingImage;

    private async Task HandleSelected(InputFileChangeEventArgs e)
        {
        try
            {
            foreach (var file in e.GetMultipleFiles())
                {
                using var memoryStream = new MemoryStream();
                await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(memoryStream);

                var uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                memoryStream.Position = 0;
                var resizedImageUrl = await ImageResizeService.ResizeImage(memoryStream, file.ContentType, 150, 150);
                memoryStream.Position = 0;
                var buffer = memoryStream.ToArray();
                ProductVariantImages productVariantImages = new ProductVariantImages
                    {
                    ImageUrl = resizedImageUrl,
                    ImageByte = buffer,
                    ImageName = uniqueFileName
                    };

                selectedFiles.Add(productVariantImages);
                }

            productVariant.productVariantImages = selectedFiles;
            StateHasChanged();
            }
        catch (Exception ex)
            {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
            }
        }

    private void RemoveImage(ProductVariantImages image)
        {

        var node = selectedFiles.FirstOrDefault(a => a.ImageName == image.ImageName && a.IsDeleted == false);
        node.IsDeleted = true;
        StateHasChanged();
        }


    private void OnCheckboxChanged(ChangeEventArgs e)
        {
        try
            {
            bool isChecked = (bool)e.Value;

            if (isChecked)
                {
                if (Product != null)
                    {


                    if (Product.ProductMedias != null && Product.ProductMedias.Count > 0)
                        {

                        productVariant.ProductVariantMedias = Product.ProductMedias.Select(cm => new ProductVariantMedia
                            {
                            ImageUrl = cm.ImageUrl,

                            }).ToList();

                        }

                    if (Product.ProductImages != null && Product.ProductImages.Count > 0)
                        {

                        foreach (var cm in Product.ProductImages)
                            {
                            // Check if the image with the same name already exists in the selectedFiles list
                            if (!selectedFiles.Any(img => img.ImageName == cm.ImageName && img.IsDeleted == false))
                                {
                                selectedFiles.Add(new ProductVariantImages
                                    {
                                    ImageUrl = $"/Products/{Product.Id}/{cm.ImageName}",
                                    ImageName = cm.ImageName,
                                    IsCloned = true
                                    });
                                }
                            }

                        //selectedFiles.AddRange(Product.ProductImages.Select(cm => new ProductVariantImages
                        //{
                        //    ImageUrl = $"/Products/{Product.Id}/{cm.ImageName}",
                        //    ImageName = cm.ImageName,
                        //    IsCloned = true

                        //}).ToList());

                        productVariant.productVariantImages = selectedFiles;
                        }

                    }
                }
            }
        catch (Exception ex)
            {

            }


        }

    private void RemoveMediaUrl(ProductVariantMedia media)
        {
        productVariant.ProductVariantMedias.Remove(media);
        }


    private void HandleDragStart(DragEventArgs e, ProductVariantImages file)
        {
        draggingImage = file;
        }

    private void HandleDrop(ProductVariantImages targetImage)
        {
        if (draggingImage == null) return;

        int originalOrder = targetImage.Order;
        selectedFiles.Where(x => x.Order >= originalOrder).ToList().ForEach(x => x.Order++);
        draggingImage.Order = originalOrder;
        int index = 0;
        foreach (var image in selectedFiles.OrderBy(x => x.Order))
            {
            image.Order = index++;
            }
        draggingImage = null;
        }


    #endregion


    void KeyHandler(KeyboardEventArgs args)
        {
        if (args.Key == "Enter")
            {
            return;
            }
        }

}


