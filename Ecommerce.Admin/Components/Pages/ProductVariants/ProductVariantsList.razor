@page "/ProductVariantList";
@using Ecommerce.Shared.Entities.ProductVariants
@using Ecommerce.Shared.Services.ProductVariants
@inject IProductVariantService productVariantService
@inject ISnackbar snackbar
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer
@inherits AuthenticatedComponent



<div class="d-flex align-items-center mb-3">
    <div>
        <ol class="breadcrumb mb-2">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item"><a href="#">Product Variants</a></li>
            <li class="breadcrumb-item active"><i class="fa fa-arrow-back"></i> Product Variants</li>
        </ol>
    </div>
</div>

<div class="panel panel-inverse">
    <div class="panel-heading">
        <h4 class="panel-title">Product Variants - List</h4>
        <div class="panel-heading-btn">
            <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
        </div>
    </div>
    <div class="panel-body">
        <div class="row fileupload-buttonbar">
            <div class="col-xl-7">

                <span class="fileupload-process"></span>
            </div>
            <div class="col-xl-5 fileupload-progress fade d-none d-xl-block">
                <div class="progress progress-striped active">
                    <div class="progress-bar progress-bar-success" style="width:0%;"></div>
                </div>
                <div class="progress-extended">&nbsp;</div>
            </div>
        </div>
        <MudDataGrid T="ProductVariant" Items="@productVariants" ColumnResizeMode="@(_resizeColumn ? ResizeMode.Column : ResizeMode.Container)" RowsPerPage="5" Striped="true" Bordered="true">
      
            <Columns>


                <TemplateColumn Title="Thumbnail">
                    <CellTemplate>

                        @{
                            var thumbnail = context.Item.Thumbnail;
                        }
                        <img src="@thumbnail" class="rounded h-30px" />
                      

                    </CellTemplate>
                </TemplateColumn>




                <PropertyColumn Property="x => x.Name" Title="Name" />
                <!-- New Column for VariantType -->
                <TemplateColumn Title="Obj">
                    <CellTemplate>
                        @{
                            var variantType = context.Item.variantType?.ToString() ?? "N/A";
                        }
                        <div>
                            @variantType
                        </div>
                    </CellTemplate>
                </TemplateColumn>

                <!-- New Column for TypeValue -->
                <TemplateColumn Title="Obj ID">
                    <CellTemplate>
                        @{
                            var typeValue = context.Item.TypeValue ?? "N/A";
                        }
                        <div>
                            @typeValue
                        </div>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Price" Title="Price" />        
                <TemplateColumn Title="Size">
                    <CellTemplate>
                        @{
                            var sizeName = context.Item.GeneralSize?.Name ?? "N/A"; // Provide a default value if null
                        }
                        <div>
                            @sizeName
                        </div>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Color">
                    <CellTemplate>
                        @{
                            var hexCode = context.Item.GeneralColor?.HexCode ?? "#FFFFFF"; // Provide a default value if null
                        }
                        <div style="background-color:@hexCode; color:@(hexCode == "#000000" ? "#FFFFFF" : "#000000"); padding: 15px; border-radius: 3px;">

                        </div>
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="Year">
                    <CellTemplate>
                        @{
                            var year = context.Item.ModelYear?.Year.ToString() ?? "N/A";
                        }
                        <div>
                            @year
                        </div>
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="Publish">
                    <CellTemplate>
                        @{
                            var isPublished = context.Item.Publish;
                        }
                        <MudIcon Icon="@($"{(isPublished ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)}")" Color="@(isPublished ? Color.Success : Color.Error)" />
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn CellClass="d-flex justify-end">
                    <HeaderTemplate>
                        <div>Actions</div>
                    </HeaderTemplate>
                    <CellTemplate>
                        <MudStack Row>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="text-warning" OnClick="() => EditProductVariant(context.Item)" />

                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="ProductVariant" PageSizeOptions=@(new int[] { 5, 10, 20 }) />
            </PagerContent>
        </MudDataGrid>
    </div>
</div>

@code {
    [Inject]
    public IDialogService DialogService { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "ProductId")]
    public long ProductId { get; set; }

    private bool _resizeColumn;
    private IEnumerable<ProductVariant> productVariants = new List<ProductVariant>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadProductVariants();
    }

    private async Task LoadProductVariants()
    {
        try
        {
            var response = await productVariantService.GetAllProductVariantsAsync(ProductId,UserId,IsAgent);
            if (response.Success)
            {
                productVariants = response.Data;
            }
            else
            {
                snackbar.Add(response.Message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            snackbar.Add("An error occurred while loading product variants: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in LoadProductVariants: {ex}");
        }
    }

    private void EditProductVariant(ProductVariant productVariant)
    {
        try
        {
            navigationManager.NavigateTo($"/AddEditProductVariants?Id={productVariant.Id}&ProductId={ProductId}");
        }
        catch (Exception ex)
        {
            snackbar.Add("An error occurred while navigating to edit the product variant: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in EditProductVariant: {ex}");
        }
    }

    private async Task DeleteProductVariant(ProductVariant productVariant)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Do you want to confirm?");
            parameters.Add("ButtonText", "Yes");
            var dialogresult = DialogService.Show<DeleteDialog>("Confirm", parameters);
            var result = await dialogresult.Result;
            if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out bool resultbool))
                await Delete(productVariant);
        }
        catch (Exception ex)
        {
            snackbar.Add("An error occurred while attempting to delete the product variant: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in DeleteProductVariant: {ex}");
        }
    }

    private async Task Delete(ProductVariant productVariant)
    {
        try
        {
            var response = await productVariantService.DeleteProductVariantAsync(productVariant.Id);
            if (response.Success)
            {
                await LoadProductVariants();
                snackbar.Add(response.Message, Severity.Success);
            }
            else
            {
                snackbar.Add(response.Message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            snackbar.Add("An error occurred while deleting the product variant: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in Delete: {ex}");
        }
    }


}
