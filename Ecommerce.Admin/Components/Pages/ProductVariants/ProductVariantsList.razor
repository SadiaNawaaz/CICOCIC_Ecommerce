@page "/ProductVariantList";
@using Ecommerce.Shared.Entities.ProductVariants
@using Ecommerce.Shared.Services.ProductVariants
@inject IProductVariantService productVariantService
@inject ISnackbar snackbar
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer
@inherits AuthenticatedComponent
@inject CsvExportService CsvExportService


<style>

    .mud-table-head {
        background-color: #653ea7;
        color: white;
    }
</style>

<div class="d-flex align-items-center mb-3">
    <div>
        <ol class="breadcrumb mb-2">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item"><a href="#">Variants</a></li>
         
        </ol>
    </div>
</div>

<div class="panel panel-inverse">
    <div class="panel-heading">
        <h4 class="panel-title">Variants List</h4>
        <div class="panel-heading-btn">
            <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
            <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
        </div>
    </div>
    <div class="panel-body">
        <div class="input-group mb-3">
            <button class="btn btn-white" type="button" aria-haspopup="true" aria-expanded="false">Filter Variants <b class="caret"></b></button>



            <div class="flex-fill position-relative">
                <div class="input-group">
                    <div class="input-group-text position-absolute top-0 bottom-0 bg-none border-0 pe-0" style="z-index: 1;">
                        <i class="fa fa-search opacity-5"></i>
                    </div>
                    <input type="text" class="form-control ps-35px bg-light" placeholder="Search ..." @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterVariants" />
                </div>
            </div>
            &nbsp; &nbsp; &nbsp;
            <ExportComponent T="ProductVariant" Data="filteredVariants" FileNamePrefix="ProductVariants"  ColumnMappings="productVariantColumnMappings"/>

        </div>
        <MudDataGrid T="ProductVariant" Items="@filteredVariants" ColumnResizeMode="@(_resizeColumn ? ResizeMode.Column : ResizeMode.Container)" RowsPerPage="10" Striped="true" Bordered="true">
            <!-- Define ColGroup for column widths -->
            <ColGroup>
                <col style="width:40px;" />
                <col />
                <col />
                <col />
                <col />
                <col />
                <col />

                <col style="width:40px;" />
            </ColGroup>

            <Columns>
                <!-- Thumbnail Column -->
                <TemplateColumn Title="Thumbnail" Style="width: 60px;">
                    <CellTemplate>
                        @{
                            var thumbnail = context.Item.Thumbnail;
                        }
                        <img src="@thumbnail" alt="NoImage.png" style="width:65px; height:30px; object-fit: cover;" onerror="this.onerror=null; this.src='NoImage.png';" />
                    </CellTemplate>
                </TemplateColumn>

                <!-- Name Column -->
                <PropertyColumn Property="x => x.Name" Title="Name" />

                <!-- Obj Column -->
                <TemplateColumn Title="Obj">
                    <CellTemplate>
                        @{
                            var variantType = context.Item.variantType?.ToString() ?? "N/A";
                        }
                        <div>
                            @variantType
                        </div>
                    </CellTemplate>
                </TemplateColumn>

                <!-- Obj ID Column -->
                <TemplateColumn Title="Obj ID">
                    <CellTemplate>
                        @{
                            var typeValue = context.Item.TypeValue ?? "N/A";
                        }
                        <div>
                            @typeValue
                        </div>
                    </CellTemplate>
                </TemplateColumn>

                <!-- Price Column -->
                <PropertyColumn Property="x => x.Price" Title="Price" />

                <!-- Size Column -->
                <TemplateColumn Title="Size">
                    <CellTemplate>
                        @{
                            var sizeName = context.Item.GeneralSize?.Name ?? "N/A"; // Provide a default value if null
                        }
                        <div>
                            @sizeName
                        </div>
                    </CellTemplate>
                </TemplateColumn>

                <!-- Color Column -->
                <TemplateColumn Title="Color">
                    <CellTemplate>
                        @{
                            var hexCode = context.Item.GeneralColor.Name ?? "#FFFFFF"; 
                        }
                        @*<div style="background-color:@hexCode; color:@(hexCode == "#000000" ? "#FFFFFF" : "#000000"); padding: 5px; border-radius: 3px;">
        </div>*@

                        <span class="badge" style="background-color:@hexCode"> @hexCode </span>

                    </CellTemplate>
                </TemplateColumn>


                <!-- Year Column -->
                <TemplateColumn Title="Year">
                    <CellTemplate>
                        @{
                            var year = context.Item.ModelYear?.Year.ToString() ?? "N/A";
                        }
                        <div>
                            @year
                        </div>
                    </CellTemplate>
                </TemplateColumn>
                @if (IsAgent != null && IsAgent == false)
                    {
                    <TemplateColumn Title="Sold">
                        <CellTemplate>
                            @if (context.Item.Sold == 1)
                                {
                                <span>Yes</span>
                                }
                            else
                                {
                                <span>No</span>
                                }
                        </CellTemplate>
                    </TemplateColumn>
                    }


                <TemplateColumn Title="Publish">
                    <CellTemplate>
                        @{
                            var isPublished = context.Item.Publish;

                            if (isPublished)
                                {


                                <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="tooltip" title="Published">
                                    <i class="fa fa-check"></i>
                                </button>

                                }
                            else
                                {


                                <button type="button" class="btn btn-gray btn-sm" data-bs-toggle="tooltip" title="UnPublished">
                                    <i class="fa fa-times"></i>
                                </button>
                                }
                        }



                    </CellTemplate>
                </TemplateColumn>

                <!-- Manage Records Column -->
                <TemplateColumn Title="Actions" Style="width: 60px;">
                    <HeaderTemplate>
                        <div>Manage Records</div>
                    </HeaderTemplate>
                    <CellTemplate>
                        <MudStack Row>
                            <button type="button" class="btn btn-yellow btn-sm" data-bs-toggle="tooltip" title="Edit" @onclick="@(e => EditProductVariant(context.Item))">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button type="button" class="btn btn-warning btn-sm" data-bs-toggle="tooltip" title="Object" @onclick="@(e => CreateObject(context.Item))">
                                <i class="fas fa-object-group"></i>
                            </button>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>

            <!-- Pagination Control -->
            <PagerContent>
                <MudDataGridPager T="ProductVariant" />
            </PagerContent>
        </MudDataGrid>


    </div>
</div>

@code {
    [Inject]
    public IDialogService DialogService { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "ProductId")]
    public long ProductId { get; set; }

    private bool _resizeColumn;
    private string searchTerm = string.Empty;
    private List<ProductVariant> filteredVariants = new List<ProductVariant>();
    private List<ProductVariant> productVariants = new List<ProductVariant>();
    private Dictionary<string, string> productVariantColumnMappings = new Dictionary<string, string>
    {
        { "ProductId", "Product ID" },
        { "Name", "Product Name" },
        { "Price", "Price (USD)" },
        { "GeneralSize", "Size" },
        { "GeneralColor", "Color" },
        { "Publish", "Is Published" },

    };
    protected override async Task OnInitializedAsync()
        {
        await base.OnInitializedAsync();
        await LoadProductVariants();
        }

    private async Task LoadProductVariants()
        {
        try
            {
            var response = await productVariantService.GetAllProductVariantsAsync(ProductId, UserId, IsAgent);
            if (response.Success)
                {
                productVariants = response.Data;
                filteredVariants = productVariants;
                }
            else
                {
                snackbar.Add(response.Message, Severity.Error);
                }
            }
        catch (Exception ex)
            {
            snackbar.Add("An error occurred while loading product variants: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in LoadProductVariants: {ex}");
            }
        }
    private void FilterVariants()
        {

        try
            {
            if (string.IsNullOrWhiteSpace(searchTerm))
                {
                filteredVariants = productVariants;
                }
            else
                {
                filteredVariants = productVariants.Where(v =>
                    (v.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (v.variantType?.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (v.TypeValue?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (v.GeneralSize?.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)

                ).ToList();


                }
            }
        catch(Exception ex)
                {

                }

        }
    private void EditProductVariant(ProductVariant productVariant)
        {
        try
            {
            if(ProductId==0 || ProductId==null)
                {
                ProductId = productVariant.ProductId;
                }
            navigationManager.NavigateTo($"/AddEditProductVariants?Id={productVariant.Id}&ProductId={ProductId}");
            }
        catch (Exception ex)
            {
            snackbar.Add("An error occurred while navigating to edit the product variant: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in EditProductVariant: {ex}");
            }
        }

    private async Task DeleteProductVariant(ProductVariant productVariant)
        {
        try
            {
            var parameters = new DialogParameters();
            parameters.Add("ContentText", "Do you want to confirm?");
            parameters.Add("ButtonText", "Yes");
            var dialogresult = DialogService.Show<DeleteDialog>("Confirm", parameters);
            var result = await dialogresult.Result;
            if (!result.Canceled && bool.TryParse(result.Data.ToString(), out bool resultbool))
                await Delete(productVariant);
            }
        catch (Exception ex)
            {
            snackbar.Add("An error occurred while attempting to delete the product variant: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in DeleteProductVariant: {ex}");
            }
        }

    private async Task Delete(ProductVariant productVariant)
        {
        try
            {
            var response = await productVariantService.DeleteProductVariantAsync(productVariant.Id);
            if (response.Success)
                {
                await LoadProductVariants();
                snackbar.Add(response.Message, Severity.Success);
                }
            else
                {
                snackbar.Add(response.Message, Severity.Error);
                }
            }
        catch (Exception ex)
            {
            snackbar.Add("An error occurred while deleting the product variant: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in Delete: {ex}");
            }
        }


    private void CreateObject(ProductVariant productVariant)
        {
        try
            {
            if (ProductId == 0 || ProductId == null)
                {
                ProductId = productVariant.ProductId;
                }
            navigationManager.NavigateTo($"/AddEditVariantObject?Id={productVariant.Id}&ProductId={ProductId}");
            }
        catch (Exception ex)
            {
            snackbar.Add("An error occurred while navigating to edit the product variant: " + ex.Message, Severity.Error);
            Console.Error.WriteLine($"Error in EditProductVariant: {ex}");
            }
        }







}
