@page "/UserList"
@inject IUserService UserService
@using Ecommerce.Shared.Services.Users;
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))
<div class="d-flex align-items-center mb-3">
    <div>
        <ol class="breadcrumb mb-2">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active">Users</li>
        </ol>
    </div>
    <div class="ms-auto">
        <button @onclick="NavigateToAddUser" class="btn btn-General btn-rounded px-4 rounded-pill"><i class="fa fa-plus fa-lg me-2 ms-n2 text-primary-900"></i>Add User</button>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <div class="panel panel-inverse">
            <div class="panel-heading">
                <h4 class="panel-title">Users</h4>
                <div class="panel-heading-btn">
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-default" data-toggle="panel-expand"><i class="fa fa-expand"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-success" data-toggle="panel-reload"><i class="fa fa-redo"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-warning" data-toggle="panel-collapse"><i class="fa fa-minus"></i></a>
                    <a href="javascript:;" class="btn btn-xs btn-icon btn-danger" data-toggle="panel-remove"><i class="fa fa-times"></i></a>
                </div>
            </div>
            <div class="panel-body">

                <MudDataGrid T="User" Items="@users" ColumnResizeMode="@(_resizeColumn ? ResizeMode.Column : ResizeMode.Container)" RowsPerPage="10" Striped="true" Bordered="true">
                    <ColGroup>
                        <col style="width: 20%;" />
                        <col style="width: 20%;" />
                        <col style="width: 30%;" />
                        <col style="width: 30%;" />
                    </ColGroup>
                    <Columns>
                        <PropertyColumn Property="x => x.FirstName" Title="First Name" />
                        <PropertyColumn Property="x => x.LastName" Title="Last Name" />
                        <PropertyColumn Property="x => x.Email" Title="Email" />
                        @*<PropertyColumn Property="x => x.Role.Name" Title="Role" />*@
                        <TemplateColumn>
                            <HeaderTemplate>
                                <div>Manage Records</div>
                            </HeaderTemplate>
                            <CellTemplate>
                                <MudStack Row>
                                    <button type="button" class="btn btn-yellow btn-sm" data-bs-toggle="tooltip" title="Edit" @onclick="() => EditUser(context.Item.Id)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button type="button" class="btn btn-danger btn-sm" data-bs-toggle="tooltip" title="Delete" @onclick="() => DeleteUser(context.Item)">
                                        <i class="fas fa-trash"></i>
                                    </button>


                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="User" PageSizeOptions="@(new int[] { 5, 10, 20 })" />
                    </PagerContent>
                </MudDataGrid>
            </div>
        </div>
    </div>
</div>

@code {
    private bool _resizeColumn = true;
    private List<User> users;
    [Inject]
    public IDialogService DialogService { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        var response = await UserService.GetUsersAsync();
        if (response.Success)
        {
            users = response.Data;
        }
        else
        {
            Snackbar.Add(response.Message, Severity.Error);
        }
    }

    private void NavigateToAddUser()
    {
        NavigationManager.NavigateTo("/AddEditUser");
    }

    private void EditUser(long userId)
    {
        NavigationManager.NavigateTo($"/AddEditUser/{userId}");
    }

    private async Task DeleteUser(User user)
    {
        var parameters = new DialogParameters
{
            { "ContentText", "Do you want to confirm?" },
            { "ButtonText", "Yes" }
        };

        var dialogResult = await DialogService.Show<DeleteDialog>("Confirm", parameters).Result;

        if (!dialogResult.Canceled && bool.TryParse(dialogResult.Data.ToString(), out bool result) && result)
        {
            var response = await UserService.DeleteUserAsync(user.Id);
            if (response.Success)
            {
                Snackbar.Add(response.Message, Severity.Success);
                await LoadUsers();
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
            }
        }
    }
}
